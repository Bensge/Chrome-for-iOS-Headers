/*
 *     Generated by class-dump 3.1.2.
 *
 *     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2007 by Steve Nygard.
 */

#import "_AudioQueueAllocateBuffer.h"

#import "BookmarkEditViewControllerDelegate-Protocol.h"
#import "BrowserIOS-Protocol.h"
#import "CardSideSwipeViewDelegate-Protocol.h"
#import "ContextMenuProvider-Protocol.h"
#import "InfoBarOverlayProvider-Protocol.h"
#import "NativeContentProvider-Protocol.h"
#import "PrerenderControllerDelegate-Protocol.h"
#import "SwipeRecognizerProvider-Protocol.h"
#import "TabModelObserver-Protocol.h"
#import "UIGestureRecognizerDelegate-Protocol.h"
#import "UpgradeCenterClientProtocol-Protocol.h"
#import "UrlLoader-Protocol.h"
#import "WebToolbarDelegate-Protocol.h"

@class UIButton, UIView;

@interface BrowserViewController : _AudioQueueAllocateBuffer <UpgradeCenterClientProtocol, BookmarkEditViewControllerDelegate, BrowserIOS, CardSideSwipeViewDelegate, ContextMenuProvider, InfoBarOverlayProvider, NativeContentProvider, PrerenderControllerDelegate, TabModelObserver, SwipeRecognizerProvider, UIGestureRecognizerDelegate, UrlLoader, WebToolbarDelegate>
{
    struct scoped_nsobject<BrowserViewControllerDependencyFactory> dependencyFactory_;
    struct scoped_nsobject<TabModel> model_;
    struct scoped_nsobject<PrerenderController> prerenderController_;
    struct scoped_nsobject<WebToolbarController> toolbarController_;
    struct scoped_nsobject<TabStripController> tabStripController_;
    struct scoped_nsobject<PageInfoViewController> pageInfoController_;
    struct scoped_refptr<VoiceSearchController> voiceSearchController_;
    struct scoped_nsobject<FindBarControllerIOS> findBarController_;
    struct scoped_nsobject<NoTabsController> noTabsController_;
    UIView *contentArea_;
    UIButton *typingShield_;
    BOOL inNewTabAnimation_;
    BOOL inSwitcherView_;
    BOOL webUsageSuspended_;
    BOOL expectingForegroundTab_;
    struct Profile *profile_;
    struct scoped_nsobject<ThumbnailHelper> thumbnailHelper_;
    struct scoped_ptr<InfoBarContainerIOS> infoBarContainer_;
    struct scoped_ptr<InfoBarContainerDelegate> infoBarContainerDelegate_;
    struct ImageFetcher imageFetcher_;
    struct scoped_nsobject<CardSideSwipeView> sideSwipeView_;
    unsigned int startingTabIndex_;
    struct scoped_nsobject<SideSwipeGestureRecognizer> swipeGestureRecognizer_;
    struct scoped_nsobject<FirstVisitOverlay> firstVisitOverlay_;
    struct scoped_nsobject<UIPopoverController> popoverController_;
    struct ObjCPropertyReleaser propertyReleaser_BrowserViewController_;
    BOOL modeToggleNeedsSetting_;
    struct scoped_nsobject<NSTimer> findInPageTimer_;
    struct scoped_nsobject<NSMutableDictionary> dominantColorCache_;
    struct scoped_nsobject<NSMutableDictionary> mostVisitedCompositeCache_;
    struct scoped_ptr<BrowserBookmarkModelBridge> bookmarkModelBridge_;
    // Error parsing type: ^{BookmarkModel=^^?^^?{NotificationRegistrar={vector<content::NotificationRegistrar::Record, std::allocator<content::NotificationRegistrar::Record> >={_Vector_impl=^{Record}^{Record}^{Record}}}}^{Profile}BB{BookmarkNode=^^?{basic_string<unsigned short, base::string16_char_traits, std::allocator<unsigned short> >={_Alloc_hider=^S}}^{BookmarkNode}{ScopedVector<BookmarkNode>={vector<BookmarkNode *, std::allocator<BookmarkNode *> >={_Vector_impl=^^{BookmarkNode}^^{BookmarkNode}^^{BookmarkNode}}}}q{GURL={basic_string<char, std::char_traits<char>, std::allocator<char> >={_Alloc_hider=*}}B{Parsed={Component=ii}{Component=ii}{Component=ii}{Component=ii}{Component=ii}{Component=ii}{Component=ii}{Component=ii}^{Parsed}}^{GURL}}i{Time=q}{Time=q}{scoped_ptr<gfx::Image>=^{Image}}iBi}^{BookmarkPermanentNode}^{BookmarkPermanentNode}^{BookmarkPermanentNode}q{ObserverList<BookmarkModelObserver, false>={WeakReferenceOwner={scoped_refptr<base::internal::WeakReference::Flag>=^{Flag}}}{vector<BookmarkModelObserver *, std::allocator<BookmarkModelObserver *> >={_Vector_impl=^^{BookmarkModelObserver}^^{BookmarkModelObserver}^^{BookmarkModelObserver}}}ii}{multiset<BookmarkNode *, BookmarkModel::NodeURLComparator, std::allocator<BookmarkNode *> >={_Rb_tree<BookmarkNode *, BookmarkNode *, std::_Identity<BookmarkNode *>, BookmarkModel::NodeURLComparator, std::allocator<BookmarkNode *> >={_Rb_tree_impl<BookmarkModel::NodeURLComparator, false>={NodeURLComparator=}{_Rb_tree_node_base=i^{_Rb_tree_node_base}^{_Rb_tree_node_base}^{_Rb_tree_node_base}}I}}}{Lock={LockImpl={_opaque_pthread_mutex_t=l[40c]}}}{CancelableRequestConsumerTSimple<BookmarkNode *>=^^?{map<CancelableRequestConsumerTSimple<BookmarkNode *>::PendingRequest, BookmarkNode *, std::less<CancelableRequestConsumerTSimple<BookmarkNode *>::PendingRequest>, std::allocator<std::pair<const CancelableRequestConsumerTSimple<BookmarkNode *>::PendingRequest, BookmarkNode *> > >={_Rb_tree<CancelableRequestConsumerTSimple<BookmarkNode *>::PendingRequest, std::pair<const CancelableRequestConsumerTSimple<BookmarkNode *>::PendingRequest, BookmarkNode *>, std::_Select1st<std::pair<const CancelableRequestConsumerTSimple<BookmarkNode *>::PendingRequest, BookmarkNode *> >, std::less<CancelableRequestConsumerTSimple<BookmarkNode *>::PendingRequest>, std::allocator<std::pair<const CancelableRequestConsumerTSimple<BookmarkNode *>::PendingRequest, BookmarkNode *> > >={_Rb_tree_impl<std::less<CancelableRequestConsumerTSimple<BookmarkNode *>::PendingRequest>, false>={less<CancelableRequestConsumerTSimple<BookmarkNode *>::PendingRequest>=}{_Rb_tree_node_base=i^{_Rb_tree_node_base}^{_Rb_tree_node_base}^{_Rb_tree_node_base}}I}}}{PendingRequest=^{CancelableRequestProvider}i}}{scoped_refptr<BookmarkStorage>=^{BookmarkStorage}}{scoped_ptr<BookmarkIndex>=^{BookmarkIndex}}{WaitableEvent={scoped_refptr<base::WaitableEvent::WaitableEventKernel>=^{WaitableEventKernel}}}i{scoped_ptr<BookmarkExpandedStateTracker>=^{BookmarkExpandedStateTracker}}}, name: bookmarkModel_
}

- (void)setTypingShield:(id)fp8;
- (id)typingShield;
- (void)setContentArea:(id)fp8;
- (id)contentArea;
- (id).cxx_construct;
- (void).cxx_destruct;
- (void)setUpForSyncTesting:(id)fp8;
- (void)bookmarkNodeModified:(const struct BookmarkNode *)fp8;
- (void)handleLowMemory;
- (id)currentSessionEntry;
- (BOOL)shouldUseDesktopUserAgent;
- (void)moviePlayerWillExitFullscreen:(id)fp8;
- (void)keyboardWillBeHidden:(id)fp8;
- (void)keyboardWasShown:(id)fp8;
- (void)cardSideSwipeViewDismissAnimationDidEnd;
- (BOOL)gestureRecognizerShouldBegin:(id)fp8;
- (BOOL)gestureRecognizer:(id)fp8 shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)fp12;
- (void)addHorizontalGestures;
- (void)handleiPhoneSwipe:(id)fp8;
- (void)handleiPadSwipe:(id)fp8;
- (void)deleteGreyCache;
- (void)createGreyCache:(int)fp8;
- (void)infoBarContainerStateChanged:(_Bool)fp8;
- (void)showUpgrade:(id)fp8;
- (void)tabModel:(id)fp8 removedTab:(id)fp12 atIndex:(unsigned int)fp16;
- (void)cancelEditor:(id)fp8;
- (void)bookmarkEditor:(id)fp8 didFinish:(const struct BookmarkNode *)fp12 withTitle:(id)fp16 url:(struct GURL)fp20 folder:(const struct BookmarkNode *)fp100 shouldDelete:(BOOL)fp104;
- (id)toolbarSnapshotWithWidth:(float)fp8;
- (void)tabSwitcherWillBeDismissed;
- (void)tabSwitcherWillBeShown;
- (void)startVoiceSearch;
- (void)showNTPPanel:(int)fp8;
- (void)showAllBookmarks;
- (void)updateFindBar:(BOOL)fp8;
- (void)pumpFindStringInPage;
- (void)searchFindInPage;
- (void)completeFindInPage:(BOOL)fp8;
- (void)initFindBarForTab;
- (BOOL)canShowFindBar;
- (void)showFindBarWithAnimation:(BOOL)fp8;
- (void)hideFindBarWithAnimation:(BOOL)fp8;
- (void)enableDesktopUserAgent;
- (void)showHelpPage;
- (void)sharePage;
- (void)closeCurrentTab;
- (void)showBookmarkController:(id)fp8;
- (void)editBookmark;
- (void)addBookmark;
- (void)showBookmarkEditor;
- (void)chromeExecuteCommand:(id)fp8;
- (id)addCardView;
- (BOOL)verifyToolbarViewPlacement;
- (void)prepareToEnterTabSwitcher:(id)fp8;
- (void)locationBarBeganEdit:(id)fp8;
- (void)locationBarDidResignFirstResponder:(id)fp8;
- (void)locationBarDidBecomeFirstResponder:(id)fp8;
- (void)openJavascript:(id)fp8;
- (void)loadSessionTab:(const struct SessionTab *)fp8;
- (void)webPageOrderedOpen:(id)fp8 referrer:(id)fp12 windowName:(id)fp16 inIncognito:(BOOL)fp20 inBackground:(BOOL)fp24 appendTo:(int)fp28;
- (void)webPageOrderedOpen:(id)fp8 referrer:(id)fp12 windowName:(id)fp16 inBackground:(BOOL)fp20 appendTo:(int)fp24;
- (void)loadJavascriptFromLocationBar:(id)fp8;
- (void)loadURL:(id)fp8 referrer:(id)fp12 transition:(int)fp16 rendererInitiated:(BOOL)fp20;
- (void)newTab:(id)fp8;
- (void)showSecurityHelpPage;
- (void)hidePageInfoPopupForView:(id)fp8;
- (void)showPageInfoPopupForView:(id)fp8;
- (void)showToolsMenuPopup;
- (void)dismissNoTabsUI;
- (void)showNoTabsUI;
- (id)tabModel;
- (struct Profile *)profile;
- (id)contextMenuForDictionary:(id)fp8;
- (id)swipeRecognizers;
- (void)image:(id)fp8 didFinishSavingWithError:(id)fp12 contextInfo:(void *)fp16;
- (void)saveImageAtUrl:(id)fp8;
- (id)controllerForUrl:(id)fp8;
- (id)controllerForUrl:(id)fp8 withError:(id)fp12;
- (float)infoBarOverlayYOffsetForTab:(id)fp8;
- (id)infoBarOverlayViewForTab:(id)fp8;
- (void)shieldWasTapped:(id)fp8;
- (void)installDelegatesForTab:(id)fp8;
- (id)pageOpenCloseAnimationView;
- (void)expectNewForegroundTab;
- (void)resumeWebUsage;
- (void)suspendWebUsage;
- (BOOL)isTabNativePage:(id)fp8;
- (BOOL)isCurrentTabLoading;
- (BOOL)canUseDesktopUserAgent;
- (BOOL)isCurrentTabBookmarked;
- (id)setUpForSyncTestingHostString;
- (id)addProfileForTestingHostString;
- (id)setUpForTestingHostString;
- (id)aboutAppEventsHostString;
- (id)aboutSyncHostString;
- (id)aboutWelcomeHostString;
- (id)chromeUIBrowserCrashHost;
- (id)chromeToDeviceHostString;
- (id)versionHostString;
- (id)termsHostString;
- (id)creditsHostString;
- (id)crashesHostString;
- (id)bookmarksHostString;
- (id)newTabPageHostString;
- (id)versionURLString;
- (id)termsURLString;
- (id)creditsURLString;
- (id)crashesURLString;
- (id)bookmarksURLString;
- (id)newTabPageURLString;
- (id)addSelectedTabWithURL:(id)fp8 transition:(int)fp12;
- (BOOL)addTabIfNoTabWithNormalProfile;
- (BOOL)shouldOpenNTPTabOnLaunch;
- (void)tabAddedFromLink:(id)fp8;
- (void)tabWillClose:(id)fp8;
- (void)tabCountChanged:(id)fp8;
- (void)displayTab:(id)fp8;
- (void)tabSelected:(id)fp8;
- (void)tabLoadComplete:(id)fp8 withSuccess:(BOOL)fp12;
- (void)pageLoadComplete:(id)fp8;
- (void)pageLoadStarted:(id)fp8;
- (void)pageLoadStarting:(id)fp8;
- (void)tabModel:(id)fp8 changedTabProgress:(id)fp12;
- (void)tabModel:(id)fp8 changedTab:(id)fp12;
- (void)tabModel:(id)fp8 replacedTab:(id)fp12 withTab:(id)fp16 atIndex:(unsigned int)fp20;
- (void)tabModel:(id)fp8 activeTabChanged:(id)fp12 previousTab:(id)fp16 atIndex:(unsigned int)fp20;
- (void)tabModel:(id)fp8 insertedTab:(id)fp12 atIndex:(unsigned int)fp16 inForeground:(BOOL)fp20;
- (void)removeFirstVisitOverlay;
- (void)updateFirstVisitOverlay:(id)fp8;
- (void)createFirstVisitOverlayIfNeeded;
- (void)updateToolbar;
- (BOOL)shouldShowUrl:(id)fp8;
- (BOOL)canShowShareMenu;
- (BOOL)hasModeToggleSwitch;
- (void)setHasModeToggleSwitch:(BOOL)fp8;
- (void)didReceiveMemoryWarning;
- (void)didRotateFromInterfaceOrientation:(int)fp8;
- (void)willRotateToInterfaceOrientation:(int)fp8 duration:(double)fp12;
- (BOOL)shouldAutorotateToInterfaceOrientation:(int)fp8;
- (void)viewDidUnload;
- (void)viewDidLoad;
- (void)dealloc;
- (id)initWithTabModel:(id)fp8 profile:(struct Profile *)fp12 dependencyFactory:(id)fp16;

@end

