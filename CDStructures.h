/*
 *     Generated by class-dump 3.1.2.
 *
 *     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2007 by Steve Nygard.
 */

@class BookmarkPanelController, BrowserViewControllerDependencyFactory, CATextLayer, CardSet, CardSideSwipeView, CardStackLayoutManager, CardTabView, CardView, ChromeToDeviceController, ChromeToDeviceErrorController, ChromeToDeviceInfoBarHelper, ContextMenuController, ContextMenuHolder, DeterminateProgressBar, ExternalAppLauncher, FeedbackController, FeedbackTableViewController, FindBarControllerIOS, FindInPageModel, FirstRunIpadAdjuster, FirstVisitOverlay, GIPSpeechWindowController, GestureStateTracker, HttpLoginDialogControllerFactory, HttpProtocolHandlerProxy, IncognitoPanelController, InfoBarView, Interstitial, MostVisitedPanelController, NSArray, NSAttributedString, NSMutableArray, NSMutableDictionary, NSMutableSet, NSMutableURLRequest, NSNotificationCenter, NSObject, NSRecursiveLock, NSString, NSTimer, NSURL, NewTabPagePanelController, NoTabsController, NoTabsToolbarController, OpenTabsPanelController, PageInfoViewController, PasswordController, PrerenderController, SelectedTextLabel, SessionEntry, SessionServiceIOS, SettingsLinkController, SettingsMultiLabelView, SettingsNavigationController, SideSwipeGestureRecognizer, SnapshotManager, SpeechInputLocales, StackCard, StackViewController, StackViewToolbarController, SyncErrorController, Tab, TabModel, TabModelOrderController, TabSpinnerImageProvider, TabStripController, TabView, TableViewErrorFooter, ThumbnailHelper, ToolsPopupController, TouchTrackingRecognizer, UIActionSheet, UIAlertView, UIBarButtonItem, UIFont, UIGestureRecognizer, UIImage, UIImageView, UILabel, UIPopoverController, UISwitch, UITableViewCell, UITapGestureRecognizer, UITextField, UIView, UIViewController, UIWebView, UpgradeCenter, VerticalViewScroller, WebToolbarController;

struct ACMatchClassification;

struct AboutCrashesCrashUploadListDelegate {
    void **_vptr$Delegate;
    struct scoped_refptr<CrashUploadList> list_fetcher_;
    struct scoped_nsobject<id> html_callback_;
};

struct Animation;

struct AnimationContainer;

struct AnimationDelegate;

struct AppEvent;

struct AuthChallengeInfo {
    int _field1;
    _Bool _field2;
    struct HostPortPair _field3;
    struct basic_string<char, std::char_traits<char>, std::allocator<char>> _field4;
    struct basic_string<char, std::char_traits<char>, std::allocator<char>> _field5;
};

struct AutocompleteEditController;

struct AutocompleteEditModel;

struct AutocompleteMatch;

struct AutocompletePopupModel;

struct AutocompleteResult {
    struct vector<AutocompleteMatch, std::allocator<AutocompleteMatch>> matches_;
    struct __normal_iterator<const AutocompleteMatch *, std::vector<AutocompleteMatch, std::allocator<AutocompleteMatch>>> default_match_;
    struct GURL alternate_nav_url_;
};

struct BindStateBase;

struct BlockedPopupHandler {
    void **_field1;
    struct Profile *_field2;
    id _field3;
    struct InfoBarDelegate *_field4;
    struct vector<BlockedPopupHandler::Popup, std::allocator<BlockedPopupHandler::Popup>> _field5;
    struct NotificationRegistrar _field6;
};

struct BookmarkEditModelBridge;

struct BookmarkModelBridge;

struct BookmarkNode {
    void **_field1;
    struct basic_string<unsigned short, base::string16_char_traits, std::allocator<unsigned short>> _field2;
    struct BookmarkNode *_field3;
    struct ScopedVector<BookmarkNode> _field4;
    long long _field5;
    struct GURL _field6;
    int _field7;
    struct Time _field8;
    struct Time _field9;
    struct scoped_ptr<gfx::Image> _field10;
    int _field11;
    _Bool _field12;
    int _field13;
};

struct Bridge;

struct BrowserBookmarkModelBridge;

struct CGAffineTransform {
    float _field1;
    float _field2;
    float _field3;
    float _field4;
    float _field5;
    float _field6;
};

struct CGContext;

struct CGGradient;

struct CGPath;

struct CGPoint {
    float x;
    float y;
};

struct CGRect {
    struct CGPoint origin;
    struct CGSize size;
};

struct CGSize {
    float width;
    float height;
};

struct Callback<void (bool)> {
    struct scoped_refptr<base::internal::BindStateBase> _field1;
    void *_field2;
};

struct CertPrincipal {
    struct basic_string<char, std::char_traits<char>, std::allocator<char>> _field1;
    struct basic_string<char, std::char_traits<char>, std::allocator<char>> _field2;
    struct basic_string<char, std::char_traits<char>, std::allocator<char>> _field3;
    struct basic_string<char, std::char_traits<char>, std::allocator<char>> _field4;
    struct vector<std::basic_string<char>, std::allocator<std::basic_string<char>>> _field5;
    struct vector<std::basic_string<char>, std::allocator<std::basic_string<char>>> _field6;
    struct vector<std::basic_string<char>, std::allocator<std::basic_string<char>>> _field7;
    struct vector<std::basic_string<char>, std::allocator<std::basic_string<char>>> _field8;
};

struct ChangeListenerBridge;

struct ChromeLoginControllerDelegate {
    void **_field1;
};

struct ChromeMain;

struct ChromeToDeviceBackendHost;

struct ChromeToDeviceContentManagementService {
    void **_field1;
    struct Profile *_field2;
    id _field3;
    struct scoped_nsobject<NSOperationQueue> _field4;
    struct scoped_nsobject<NSString> _field5;
    struct scoped_nsobject<NSString> _field6;
    struct scoped_nsobject<NSMutableArray> _field7;
};

struct ChromeToDeviceInfoBarDelegate {
    void **_field1;
    int _field2;
    struct InfoBarTabHelper *_field3;
    struct Delegate *_field4;
};

struct ChromeToDeviceInfoBarNotificationObserver;

struct ChromeToDeviceObserver;

struct ChromeToDeviceService {
    void **_field1;
    void **_field2;
    void **_field3;
    void **_field4;
    struct Profile *_field5;
    struct SigninService *_field6;
    struct scoped_refptr<net::URLRequestContextGetter> _field7;
    struct scoped_refptr<ChromeToDeviceBackendHost> _field8;
    struct NotificationRegistrar _field9;
    struct ObserverList<ChromeToDeviceObserver, false> _field10;
    struct ObserverList<ChromeToDeviceServiceStatusObserver, false> _field11;
    struct map<std::basic_string<char>, std::basic_string<char>, std::less<std::basic_string<char>>, std::allocator<std::pair<const std::basic_string<char>, std::basic_string<char>>>> _field12;
    _Bool _field13;
    _Bool _field14;
    _Bool _field15;
    int _field16;
    int _field17;
    _Bool _field18;
    _Bool _field19;
    _Bool _field20;
    int _field21;
    _Bool _field22;
};

struct ChromeToDeviceServiceStatusObserver;

struct Component {
    int begin;
    int len;
};

struct ConfirmInfoBarDelegate {
    void **_field1;
    int _field2;
    struct InfoBarTabHelper *_field3;
};

struct Core {
    void **_field1;
    int _field2;
    struct scoped_nsobject<SyncNotificationBridge> _field3;
    struct scoped_refptr<base::MessageLoopProxy> _field4;
    struct NotifyOnActiveSyncNotifier *_field5;
};

struct CrashUploadList;

struct DefaultPrefStore;

struct Delegate {
    void **_field1;
};

struct DictionaryValue {
    void **_field1;
    int _field2;
    struct map<std::basic_string<char>, base::Value *, std::less<std::basic_string<char>>, std::allocator<std::pair<const std::basic_string<char>, base::Value *>>> _field3;
};

struct DistantSession {
    struct basic_string<char, std::char_traits<char>, std::allocator<char>> _field1;
    struct basic_string<char, std::char_traits<char>, std::allocator<char>> _field2;
    struct Time _field3;
    int _field4;
    struct ScopedVector<DistantTab> _field5;
    _Bool _field6;
};

struct DistantTab;

struct Entry {
    void **_field1;
    int _field2;
    int _field3;
    struct Time _field4;
    _Bool _field5;
};

struct FaviconHandler;

struct FaviconHandlerDelegateBridge;

struct FaviconURL;

struct FeedbackFetcherDelegate;

struct FilePath {
    struct basic_string<char, std::char_traits<char>, std::allocator<char>> _field1;
};

struct FindInPageEntry {
    struct CGPoint _field1;
    int _field2;
};

struct Flag;

struct FormData {
    struct basic_string<unsigned short, base::string16_char_traits, std::allocator<unsigned short>> _field1;
    struct basic_string<unsigned short, base::string16_char_traits, std::allocator<unsigned short>> _field2;
    struct GURL _field3;
    struct GURL _field4;
    _Bool _field5;
    struct vector<webkit::forms::FormField, std::allocator<webkit::forms::FormField>> _field6;
};

struct FormField;

struct GURL {
    struct basic_string<char, std::char_traits<char>, std::allocator<char>> spec_;
    _Bool is_valid_;
    struct Parsed parsed_;
    struct GURL *inner_url_;
};

struct HostPortPair {
    struct basic_string<char, std::char_traits<char>, std::allocator<char>> _field1;
    unsigned short _field2;
};

struct HttpProtocolHandlerCore;

struct Image;

struct ImageFetcher {
    void **_vptr$URLFetcherDelegate;
    struct map<const content::URLFetcher *, void (^)(const GURL &, UIImage *), std::less<const content::URLFetcher *>, std::allocator<std::pair<const content::URLFetcher *const, void (^)(const GURL &, UIImage *)>>> downloads_in_progress_;
    struct scoped_refptr<net::URLRequestContextGetter> request_context_getter_;
};

struct InfoBarContainer;

struct InfoBarContainerDelegate;

struct InfoBarContainerIOS;

struct InfoBarDelegate {
    void **_field1;
    int _field2;
    struct InfoBarTabHelper *_field3;
};

struct InfoBarIOS {
    void **_field1;
    struct InfoBarTabHelper *_field2;
    struct InfoBarDelegate *_field3;
    struct InfoBarContainer *_field4;
    struct SlideAnimation _field5;
    int _field6;
    int _field7;
    int _field8;
    int _field9;
    int _field10;
    void **_field11;
    struct scoped_nsobject<ConfirmInfoBarController> _field12;
};

struct InfoBarTabHelper {
    void **_field1;
    struct vector<InfoBarDelegate *, std::allocator<InfoBarDelegate *>> _field2;
    struct WebContents *_field3;
    _Bool _field4;
    struct NotificationRegistrar _field5;
};

struct InfoBarViewConfig {
    struct UIEdgeInsets _field1;
    float _field2;
    float _field3;
    float _field4;
    float _field5;
    struct CGRect _field6;
    float _field7;
    id _field8;
    float _field9;
    float _field10;
};

struct InfoBarViewDelegate {
    void **_field1;
};

struct JKConstBuffer {
    struct JKConstPtrRange _field1;
};

struct JKConstPtrRange {
    char *_field1;
    unsigned int _field2;
};

struct JKEncodeCache {
    id _field1;
    unsigned int _field2;
    unsigned int _field3;
};

struct JKEncodeState {
    struct JKManagedBuffer _field1;
    struct JKManagedBuffer _field2;
    unsigned int _field3;
    struct JKFastClassLookup _field4;
    struct JKEncodeCache _field5[1024];
    unsigned int _field6;
    unsigned int _field7;
    unsigned int _field8;
    id _field9;
};

struct JKFastClassLookup {
    void *_field1;
    void *_field2;
    void *_field3;
    void *_field4;
    void *_field5;
};

struct JKHashTableEntry {
    unsigned int _field1;
    id _field2;
    id _field3;
};

struct JKManagedBuffer {
    struct JKPtrRange _field1;
    unsigned int _field2;
    unsigned int _field3;
};

struct JKObjCImpCache {
    Class _field1;
    void *_field2;
    void *_field3;
};

struct JKObjectStack {
    void **_field1;
    void **_field2;
    unsigned int *_field3;
    unsigned int _field4;
    unsigned int _field5;
    unsigned int _field6;
    unsigned int _field7;
};

struct JKParseState {
    unsigned int _field1;
    struct JKConstBuffer _field2;
    unsigned int _field3;
    unsigned int _field4;
    unsigned int _field5;
    unsigned int _field6;
    unsigned int _field7;
    unsigned int _field8;
    struct JKParseToken _field9;
    struct JKObjectStack _field10;
    struct JKTokenCache _field11;
    struct JKObjCImpCache _field12;
    id _field13;
    int _field14;
    char _field15;
};

struct JKParseToken {
    struct JKConstPtrRange _field1;
    unsigned int _field2;
    struct JKTokenValue _field3;
    struct JKManagedBuffer _field4;
};

struct JKPtrRange {
    char *_field1;
    unsigned int _field2;
};

struct JKTokenCache {
    struct JKTokenCacheItem *_field1;
    unsigned int _field2;
    unsigned int _field3;
    unsigned char _field4[1024];
};

struct JKTokenCacheItem;

struct JKTokenValue {
    struct JKConstPtrRange _field1;
    unsigned int _field2;
    unsigned int _field3;
    union {
        long long _field1;
        unsigned long long _field2;
        double _field3;
    } _field4;
    struct JKTokenCacheItem *_field5;
};

struct ListValue {
    void **_vptr$Value;
    int type_;
    struct vector<base::Value *, std::allocator<base::Value *>> list_;
};

struct LocationBarViewIOS {
    void **_field1;
    struct scoped_ptr<OmniboxViewIOS> _field2;
    id _field3;
    id _field4;
    int _field5;
};

struct Lock {
    struct LockImpl _field1;
};

struct LockImpl {
    struct _opaque_pthread_mutex_t _field1;
};

struct MessageLoopProxy;

struct MostVisitedCallbackBridge;

struct MostVisitedURL;

struct NILinkedListNode {
    id _field1;
    struct NILinkedListNode *_field2;
    struct NILinkedListNode *_field3;
};

struct NavigationController {
    void **_field1;
};

struct NavigationEntry {
    void **_field1;
};

struct NotificationDetails {
    void *_field1;
};

struct NotificationObserverBridge;

struct NotificationRegistrar {
    struct vector<content::NotificationRegistrar::Record, std::allocator<content::NotificationRegistrar::Record>> registered_;
};

struct NotificationSource;

struct NotifyOnActiveSyncNotifier;

struct ObjCPropertyReleaser {
    id object_;
    Class class_;
};

struct Observer;

struct ObserverList<ChromeToDeviceObserver, false> {
    struct WeakReferenceOwner _field1;
    struct vector<ChromeToDeviceObserver *, std::allocator<ChromeToDeviceObserver *>> _field2;
    int _field3;
    int _field4;
};

struct ObserverList<ChromeToDeviceServiceStatusObserver, false> {
    struct WeakReferenceOwner _field1;
    struct vector<ChromeToDeviceServiceStatusObserver *, std::allocator<ChromeToDeviceServiceStatusObserver *>> _field2;
    int _field3;
    int _field4;
};

struct ObserverList<PasswordStore::Observer, false> {
    struct WeakReferenceOwner _field1;
    struct vector<PasswordStore::Observer *, std::allocator<PasswordStore::Observer *>> _field2;
    int _field3;
    int _field4;
};

struct ObserverList<TemplateURLServiceObserver, false> {
    struct WeakReferenceOwner _field1;
    struct vector<TemplateURLServiceObserver *, std::allocator<TemplateURLServiceObserver *>> _field2;
    int _field3;
    int _field4;
};

struct ObserverListThreadSafe<base::SystemMonitor::DevicesChangedObserver>;

struct ObserverListThreadSafe<base::SystemMonitor::PowerObserver>;

struct OmniboxPopupViewIOS {
    void **_field1;
    struct scoped_nsobject<PopupTableViewController> _field2;
    struct scoped_ptr<AutocompletePopupModel> _field3;
    struct OmniboxViewIOS *_field4;
    id _field5;
    _Bool _field6;
};

struct OmniboxViewIOS {
    void **_field1;
    struct scoped_nsobject<OmniboxTextFieldIOS> _field2;
    struct AutocompleteEditController *_field3;
    struct scoped_ptr<AutocompleteEditModel> _field4;
    struct scoped_ptr<OmniboxPopupViewIOS> _field5;
    id _field6;
    char _field7;
    int _field8;
    int _field9;
    struct basic_string<unsigned short, base::string16_char_traits, std::allocator<unsigned short>> _field10;
    struct scoped_nsobject<NSString> _field11;
    struct _NSRange _field12;
    struct _NSRange _field13;
    char _field14;
    struct scoped_nsobject<AutocompleteTextFieldDelegate> _field15;
};

struct PageInfoModel;

struct PageInfoModelObserver;

struct Parsed {
    struct Component scheme;
    struct Component username;
    struct Component password;
    struct Component host;
    struct Component port;
    struct Component path;
    struct Component query;
    struct Component ref;
    struct Parsed *inner_parsed_;
};

struct PasswordForm {
    int _field1;
    struct basic_string<char, std::char_traits<char>, std::allocator<char>> _field2;
    struct GURL _field3;
    struct GURL _field4;
    struct basic_string<unsigned short, base::string16_char_traits, std::allocator<unsigned short>> _field5;
    struct basic_string<unsigned short, base::string16_char_traits, std::allocator<unsigned short>> _field6;
    struct basic_string<unsigned short, base::string16_char_traits, std::allocator<unsigned short>> _field7;
    struct basic_string<unsigned short, base::string16_char_traits, std::allocator<unsigned short>> _field8;
    struct basic_string<unsigned short, base::string16_char_traits, std::allocator<unsigned short>> _field9;
    struct basic_string<unsigned short, base::string16_char_traits, std::allocator<unsigned short>> _field10;
    struct basic_string<unsigned short, base::string16_char_traits, std::allocator<unsigned short>> _field11;
    _Bool _field12;
    _Bool _field13;
    struct Time _field14;
    _Bool _field15;
};

struct PasswordFormFillData {
    struct FormData _field1;
    struct map<std::basic_string<char16, base::string16_char_traits>, std::basic_string<char16, base::string16_char_traits>, std::less<std::basic_string<char16, base::string16_char_traits>>, std::allocator<std::pair<const std::basic_string<char16, base::string16_char_traits>, std::basic_string<char16, base::string16_char_traits>>>> _field2;
    _Bool _field3;
};

struct PasswordManager;

struct PasswordManagerDelegate;

struct PasswordStore {
    void **_field1;
    int _field2;
    _Bool _field3;
    int _field4;
    void **_field5;
    struct Lock _field6;
    struct map<int, scoped_refptr<CancelableRequestBase>, std::less<int>, std::allocator<std::pair<const int, scoped_refptr<CancelableRequestBase>>>> _field7;
    int _field8;
    struct ObserverList<PasswordStore::Observer, false> _field9;
};

struct PersistentPrefStore;

struct Popup;

struct PrefChangeRegistrar {
    void **_vptr$PrefChangeRegistrar;
    struct set<std::pair<std::basic_string<char>, content::NotificationObserver *>, std::less<std::pair<std::basic_string<char>, content::NotificationObserver *>>, std::allocator<std::pair<std::basic_string<char>, content::NotificationObserver *>>> observers_;
    struct PrefService *service_;
};

struct PrefModelAssociator;

struct PrefNotifierImpl;

struct PrefService {
    void **_field1;
    struct scoped_ptr<PrefNotifierImpl> _field2;
    struct scoped_ptr<PrefValueStore> _field3;
    struct scoped_refptr<PersistentPrefStore> _field4;
    struct scoped_refptr<DefaultPrefStore> _field5;
    struct set<PrefService::Preference *, PrefService::PreferencePathComparator, std::allocator<PrefService::Preference *>> _field6;
    struct scoped_ptr<PrefModelAssociator> _field7;
    _Bool _field8;
};

struct PrefSetObserver;

struct PrefValueStore;

struct PreferencePathComparator;

struct Profile {
    void **_field1;
    struct map<const void *, linked_ptr<base::SupportsUserData::Data>, std::less<const void *>, std::allocator<std::pair<const void *const, linked_ptr<base::SupportsUserData::Data>>>> _field2;
    _Bool _field3;
    int _field4;
};

struct ProgressBarAnimationDelegate;

struct Record;

struct Referrer {
    struct GURL _field1;
    int _field2;
};

struct RemoteNotificationRegistrar;

struct RequestTracker {
    void **_field1;
    int _field2;
    id _field3;
    struct SSLHostState *_field4;
    struct map<const void *, TrackerCounts *, std::less<const void *>, std::allocator<std::pair<const void *const, TrackerCounts *>>> _field5;
    struct set<net::URLRequest *, std::less<net::URLRequest *>, std::allocator<net::URLRequest *>> _field6;
    struct ScopedVector<TrackerCounts> _field7;
    float _field8;
    unsigned int _field9;
    int _field10;
    struct TrackerCounts *_field11;
    _Bool _field12;
    _Bool _field13;
    _Bool _field14;
    struct ResourceContext *_field15;
    struct GURL _field16;
    struct scoped_nsobject<id> _field17;
    int _field18;
};

struct ResourceContext;

struct SHA1Fingerprint {
    unsigned char _field1[20];
};

struct SSLErrorInfo {
    void **_field1;
    struct basic_string<unsigned short, base::string16_char_traits, std::allocator<unsigned short>> _field2;
    struct basic_string<unsigned short, base::string16_char_traits, std::allocator<unsigned short>> _field3;
    struct basic_string<unsigned short, base::string16_char_traits, std::allocator<unsigned short>> _field4;
    struct vector<std::basic_string<char16, base::string16_char_traits>, std::allocator<std::basic_string<char16, base::string16_char_traits>>> _field5;
};

struct SSLHostState;

struct SSLInfo {
    struct scoped_refptr<net::X509Certificate> cert;
    unsigned int cert_status;
    int security_bits;
    int connection_status;
    _Bool is_issued_by_known_root;
    _Bool client_cert_sent;
    int handshake_type;
    struct vector<net::SHA1Fingerprint, std::allocator<net::SHA1Fingerprint>> public_key_hashes;
};

struct SSLStatus {
    int security_style;
    int cert_id;
    unsigned int cert_status;
    int security_bits;
    int connection_status;
    int content_status;
};

struct SavePasswordsConsumer;

struct ScopedCFTypeRef<CGGradient *> {
    struct CGGradient *object_;
};

struct ScopedCFTypeRef<const __CTFont *> {
    struct __CTFont *object_;
};

struct ScopedVector<BookmarkNode> {
    struct vector<BookmarkNode *, std::allocator<BookmarkNode *>> _field1;
};

struct ScopedVector<DistantSession> {
    struct vector<DistantSession *, std::allocator<DistantSession *>> v;
};

struct ScopedVector<DistantTab> {
    struct vector<DistantTab *, std::allocator<DistantTab *>> _field1;
};

struct ScopedVector<TrackerCounts> {
    struct vector<TrackerCounts *, std::allocator<TrackerCounts *>> _field1;
};

struct ScopedVector<webkit::forms::PasswordForm> {
    struct vector<webkit::forms::PasswordForm *, std::allocator<webkit::forms::PasswordForm *>> v;
};

struct SearchHostToURLsMap {
    struct map<std::basic_string<char>, std::set<const TemplateURL *, std::less<const TemplateURL *>, std::allocator<const TemplateURL *>>, std::less<std::basic_string<char>>, std::allocator<std::pair<const std::basic_string<char>, std::set<const TemplateURL *, std::less<const TemplateURL *>, std::allocator<const TemplateURL *>>>>> _field1;
    struct basic_string<char, std::char_traits<char>, std::allocator<char>> _field2;
    _Bool _field3;
};

struct SectionInfo {
    int _field1;
    struct basic_string<unsigned short, base::string16_char_traits, std::allocator<unsigned short>> _field2;
    struct basic_string<unsigned short, base::string16_char_traits, std::allocator<unsigned short>> _field3;
    int _field4;
};

struct SessionID {
    int _field1;
};

struct SessionTab {
    struct SessionID _field1;
    struct SessionID _field2;
    int _field3;
    int _field4;
    _Bool _field5;
    struct basic_string<char, std::char_traits<char>, std::allocator<char>> _field6;
    struct Time _field7;
    struct vector<TabNavigation, std::allocator<TabNavigation>> _field8;
};

struct SigninService;

struct SlideAnimation {
    void **_field1;
    struct TimeDelta _field2;
    _Bool _field3;
    struct AnimationDelegate *_field4;
    struct scoped_refptr<ui::AnimationContainer> _field5;
    struct TimeTicks _field6;
    struct TimeDelta _field7;
    double _field8;
    _Bool _field9;
    struct AnimationDelegate *_field10;
    int _field11;
    _Bool _field12;
    double _field13;
    double _field14;
    double _field15;
    int _field16;
};

struct SpeechRecognitionHypothesis;

struct SpeechRecognitionResult {
    struct vector<content::SpeechRecognitionHypothesis, std::allocator<content::SpeechRecognitionHypothesis>> _field1;
};

struct SyncChangeProcessor;

struct SyncInitialSetupController;

struct SyncObserverBridge;

struct SyncSetupService {
    void **_field1;
    void **_field2;
    struct Profile *_field3;
    struct map<syncable::ModelType, const char *, std::less<syncable::ModelType>, std::allocator<std::pair<const syncable::ModelType, const char *>>> *_field4;
    struct map<const char *, bool, std::less<const char *>, std::allocator<std::pair<const char *const, bool>>> _field5;
};

struct SyncedTabDelegate {
    void **_field1;
};

struct SystemMonitor {
    struct scoped_refptr<ObserverListThreadSafe<base::SystemMonitor::PowerObserver>> _field1;
    struct scoped_refptr<ObserverListThreadSafe<base::SystemMonitor::DevicesChangedObserver>> _field2;
    _Bool _field3;
    _Bool _field4;
    id _field5;
};

struct TabContentsWrapper {
    void **_field1;
    struct Profile *_field2;
    id _field3;
};

struct TabModelSyncedWindowDelegate {
    void **_field1;
    id _field2;
    struct SessionID _field3;
};

struct TabNavigation {
    struct GURL _field1;
    struct Referrer _field2;
    struct basic_string<unsigned short, base::string16_char_traits, std::allocator<unsigned short>> _field3;
    struct basic_string<char, std::char_traits<char>, std::allocator<char>> _field4;
    int _field5;
    int _field6;
    long long _field7;
    int _field8;
};

struct TabRestoreServiceDelegateIOS;

struct TabSyncedTabDelegate;

struct TargetFrameCache {
    struct map<UIView *, CGRect, std::less<UIView *>, std::allocator<std::pair<UIView *const, CGRect>>> targetFrames_;
};

struct TemplateURL;

struct TemplateURLService {
    void **_field1;
    void **_field2;
    void **_field3;
    void **_field4;
    struct WeakReferenceOwner _field5;
    struct NotificationRegistrar _field6;
    struct map<std::basic_string<char16, base::string16_char_traits>, const TemplateURL *, std::less<std::basic_string<char16, base::string16_char_traits>>, std::allocator<std::pair<const std::basic_string<char16, base::string16_char_traits>, const TemplateURL *>>> _field7;
    struct map<std::basic_string<char>, const TemplateURL *, std::less<std::basic_string<char>>, std::allocator<std::pair<const std::basic_string<char>, const TemplateURL *>>> _field8;
    struct vector<const TemplateURL *, std::allocator<const TemplateURL *>> _field9;
    struct ObserverList<TemplateURLServiceObserver, false> _field10;
    struct SearchHostToURLsMap _field11;
    struct Profile *_field12;
    _Bool _field13;
    _Bool _field14;
    int _field15;
    struct scoped_refptr<WebDataService> _field16;
    struct vector<history::URLVisitedDetails, std::allocator<history::URLVisitedDetails>> _field17;
    struct TemplateURL *_field18;
    struct scoped_ptr<TemplateURL> _field19;
    _Bool _field20;
    struct scoped_ptr<PrefSetObserver> _field21;
    long long _field22;
    struct list<std::basic_string<char>, std::allocator<std::basic_string<char>>> _field23;
    void *_field24;
    _Bool _field25;
    _Bool _field26;
    struct scoped_ptr<SyncChangeProcessor> _field27;
    _Bool _field28;
};

struct TemplateURLServiceObserver;

struct ThumbnailScore {
    double _field1;
    _Bool _field2;
    _Bool _field3;
    _Bool _field4;
    struct Time _field5;
    int _field6;
};

struct Time {
    long long _field1;
};

struct TimeDelta {
    long long _field1;
};

struct TimeTicks {
    long long ticks_;
};

struct ToolbarState {
    char _field1;
    char _field2;
    char _field3;
    char _field4;
    id _field5;
    float _field6;
    int _field7;
    id _field8;
};

struct TrackerCounts {
    struct GURL _field1;
    void *_field2;
    struct SSLInfo _field3;
    int _field4;
    _Bool _field5;
    struct Callback<void (bool)> _field6;
    unsigned long long _field7;
    unsigned long long _field8;
    _Bool _field9;
};

struct UIEdgeInsets {
    float top;
    float left;
    float bottom;
    float right;
};

struct UIOffset {
    float _field1;
    float _field2;
};

struct UIViewController {
    Class _field1;
    id _field2;
    id _field3;
    id _field4;
    id _field5;
    id _field6;
    id _field7;
    id _field8;
    id _field9;
    id _field10;
    id _field11;
    id _field12;
    id _field13;
    id _field14;
    id _field15;
    id _field16;
    id _field17;
    id _field18;
    id _field19;
    id _field20;
    id _field21;
    id _field22;
    id _field23;
    id _field24;
    id _field25;
    int _field26;
    int _field27;
    int _field28;
    id _field29;
    id _field30;
    struct CGSize _field31;
    struct CGSize _field32;
    id _field33;
    void _field34;
    int _field35;
    struct {
        unsigned int :2;
        unsigned int :1;
        unsigned int :1;
        unsigned int :1;
        unsigned int :1;
        unsigned int :1;
        unsigned int :1;
        unsigned int :1;
        unsigned int :1;
        unsigned int :1;
        unsigned int :1;
        unsigned int :1;
        unsigned int :1;
        unsigned int :1;
        unsigned int :1;
        unsigned int :1;
        unsigned int :1;
        unsigned int :1;
        unsigned int :1;
        unsigned int :1;
        unsigned int :1;
        unsigned int :1;
        unsigned int :1;
        unsigned int :1;
        unsigned int :1;
        unsigned int :1;
        unsigned int :1;
        unsigned int :1;
        unsigned int :1;
        unsigned int :1;
        unsigned int :1;
        unsigned int :1;
        unsigned int :1;
        unsigned int :1;
    } _field36;
};

struct URLFetcher {
    void **_field1;
};

struct URLRequestContextGetter {
    void **_field1;
    int _field2;
};

struct URLVisitedDetails;

struct UpgradeInfoBarDelegate {
    void **_field1;
    int _field2;
    struct InfoBarTabHelper *_field3;
    struct scoped_ptr<gfx::Image> _field4;
    _Bool _field5;
};

struct UpgradeInfoBarDismissObserver {
    void **_vptr$NotificationObserver;
    struct UpgradeInfoBarDelegate *info_bar_;
    struct NotificationRegistrar registrar_;
    struct scoped_nsobject<NSString> tab_id_;
    UpgradeCenter *dismiss_delegate_;
};

struct UserActionRateCounter;

struct Value {
    void **_field1;
    int _field2;
};

struct VoiceSearchController;

struct WWANStateObserverBridge;

struct WeakReferenceOwner {
    struct scoped_refptr<base::internal::WeakReference::Flag> _field1;
};

struct WebContents {
    void **_field1;
};

struct WebDataService;

struct X509Certificate {
    int _field1;
    struct CertPrincipal _field2;
    struct CertPrincipal _field3;
    struct Time _field4;
    struct Time _field5;
    struct SHA1Fingerprint _field6;
    struct SHA1Fingerprint _field7;
    struct basic_string<char, std::char_traits<char>, std::allocator<char>> _field8;
    struct __SecCertificate *_field9;
    struct vector<__SecCertificate *, std::allocator<__SecCertificate *>> _field10;
};

struct _Alloc_hider {
    unsigned short *_M_p;
};

struct _Deque_impl {
    struct AppEvent **_M_map;
    unsigned int _M_map_size;
    struct _Deque_iterator<ios::app_event::AppEvent, ios::app_event::AppEvent &, ios::app_event::AppEvent *> _M_start;
    struct _Deque_iterator<ios::app_event::AppEvent, ios::app_event::AppEvent &, ios::app_event::AppEvent *> _M_finish;
};

struct _Deque_iterator<ios::app_event::AppEvent, ios::app_event::AppEvent &, ios::app_event::AppEvent *> {
    struct AppEvent *_M_cur;
    struct AppEvent *_M_first;
    struct AppEvent *_M_last;
    struct AppEvent **_M_node;
};

struct _List_impl {
    struct _List_node_base _field1;
};

struct _List_node_base {
    struct _List_node_base *_field1;
    struct _List_node_base *_field2;
};

struct _NSRange {
    unsigned int _field1;
    unsigned int _field2;
};

struct _NSZone;

struct _Rb_tree<PrefService::Preference *, PrefService::Preference *, std::_Identity<PrefService::Preference *>, PrefService::PreferencePathComparator, std::allocator<PrefService::Preference *>> {
    struct _Rb_tree_impl<PrefService::PreferencePathComparator, false> _field1;
};

struct _Rb_tree<SyncSetupService::SyncServiceState, SyncSetupService::SyncServiceState, std::_Identity<SyncSetupService::SyncServiceState>, std::less<SyncSetupService::SyncServiceState>, std::allocator<SyncSetupService::SyncServiceState>> {
    struct _Rb_tree_impl<std::less<SyncSetupService::SyncServiceState>, false> _M_impl;
};

struct _Rb_tree<UIView *, std::pair<UIView *const, CGRect>, std::_Select1st<std::pair<UIView *const, CGRect>>, std::less<UIView *>, std::allocator<std::pair<UIView *const, CGRect>>> {
    struct _Rb_tree_impl<std::less<UIView *>, false> _M_impl;
};

struct _Rb_tree<const char *, std::pair<const char *const, bool>, std::_Select1st<std::pair<const char *const, bool>>, std::less<const char *>, std::allocator<std::pair<const char *const, bool>>> {
    struct _Rb_tree_impl<std::less<const char *>, false> _field1;
};

struct _Rb_tree<const content::URLFetcher *, std::pair<const content::URLFetcher *const, void (^)(const GURL &, UIImage *)>, std::_Select1st<std::pair<const content::URLFetcher *const, void (^)(const GURL &, UIImage *)>>, std::less<const content::URLFetcher *>, std::allocator<std::pair<const content::URLFetcher *const, void (^)(const GURL &, UIImage *)>>> {
    struct _Rb_tree_impl<std::less<const content::URLFetcher *>, false> _M_impl;
};

struct _Rb_tree<const void *, std::pair<const void *const, TrackerCounts *>, std::_Select1st<std::pair<const void *const, TrackerCounts *>>, std::less<const void *>, std::allocator<std::pair<const void *const, TrackerCounts *>>> {
    struct _Rb_tree_impl<std::less<const void *>, false> _field1;
};

struct _Rb_tree<const void *, std::pair<const void *const, linked_ptr<base::SupportsUserData::Data>>, std::_Select1st<std::pair<const void *const, linked_ptr<base::SupportsUserData::Data>>>, std::less<const void *>, std::allocator<std::pair<const void *const, linked_ptr<base::SupportsUserData::Data>>>> {
    struct _Rb_tree_impl<std::less<const void *>, false> _field1;
};

struct _Rb_tree<id<UpgradeCenterClientProtocol>, id<UpgradeCenterClientProtocol>, std::_Identity<id<UpgradeCenterClientProtocol>>, std::less<id<UpgradeCenterClientProtocol>>, std::allocator<id<UpgradeCenterClientProtocol>>> {
    struct _Rb_tree_impl<std::less<id<UpgradeCenterClientProtocol>>, false> _M_impl;
};

struct _Rb_tree<int, std::pair<const int, scoped_refptr<CancelableRequestBase>>, std::_Select1st<std::pair<const int, scoped_refptr<CancelableRequestBase>>>, std::less<int>, std::allocator<std::pair<const int, scoped_refptr<CancelableRequestBase>>>> {
    struct _Rb_tree_impl<std::less<int>, false> _field1;
};

struct _Rb_tree<net::URLRequest *, net::URLRequest *, std::_Identity<net::URLRequest *>, std::less<net::URLRequest *>, std::allocator<net::URLRequest *>> {
    struct _Rb_tree_impl<std::less<net::URLRequest *>, false> _field1;
};

struct _Rb_tree<std::basic_string<char16, base::string16_char_traits>, std::pair<const std::basic_string<char16, base::string16_char_traits>, const TemplateURL *>, std::_Select1st<std::pair<const std::basic_string<char16, base::string16_char_traits>, const TemplateURL *>>, std::less<std::basic_string<char16, base::string16_char_traits>>, std::allocator<std::pair<const std::basic_string<char16, base::string16_char_traits>, const TemplateURL *>>> {
    struct _Rb_tree_impl<std::less<std::basic_string<char16, base::string16_char_traits>>, false> _field1;
};

struct _Rb_tree<std::basic_string<char16, base::string16_char_traits>, std::pair<const std::basic_string<char16, base::string16_char_traits>, std::basic_string<char16, base::string16_char_traits>>, std::_Select1st<std::pair<const std::basic_string<char16, base::string16_char_traits>, std::basic_string<char16, base::string16_char_traits>>>, std::less<std::basic_string<char16, base::string16_char_traits>>, std::allocator<std::pair<const std::basic_string<char16, base::string16_char_traits>, std::basic_string<char16, base::string16_char_traits>>>> {
    struct _Rb_tree_impl<std::less<std::basic_string<char16, base::string16_char_traits>>, false> _field1;
};

struct _Rb_tree<std::basic_string<char>, std::pair<const std::basic_string<char>, base::Value *>, std::_Select1st<std::pair<const std::basic_string<char>, base::Value *>>, std::less<std::basic_string<char>>, std::allocator<std::pair<const std::basic_string<char>, base::Value *>>> {
    struct _Rb_tree_impl<std::less<std::basic_string<char>>, false> _field1;
};

struct _Rb_tree<std::basic_string<char>, std::pair<const std::basic_string<char>, const TemplateURL *>, std::_Select1st<std::pair<const std::basic_string<char>, const TemplateURL *>>, std::less<std::basic_string<char>>, std::allocator<std::pair<const std::basic_string<char>, const TemplateURL *>>> {
    struct _Rb_tree_impl<std::less<std::basic_string<char>>, false> _field1;
};

struct _Rb_tree<std::basic_string<char>, std::pair<const std::basic_string<char>, std::basic_string<char>>, std::_Select1st<std::pair<const std::basic_string<char>, std::basic_string<char>>>, std::less<std::basic_string<char>>, std::allocator<std::pair<const std::basic_string<char>, std::basic_string<char>>>> {
    struct _Rb_tree_impl<std::less<std::basic_string<char>>, false> _field1;
};

struct _Rb_tree<std::basic_string<char>, std::pair<const std::basic_string<char>, std::set<const TemplateURL *, std::less<const TemplateURL *>, std::allocator<const TemplateURL *>>>, std::_Select1st<std::pair<const std::basic_string<char>, std::set<const TemplateURL *, std::less<const TemplateURL *>, std::allocator<const TemplateURL *>>>>, std::less<std::basic_string<char>>, std::allocator<std::pair<const std::basic_string<char>, std::set<const TemplateURL *, std::less<const TemplateURL *>, std::allocator<const TemplateURL *>>>>> {
    struct _Rb_tree_impl<std::less<std::basic_string<char>>, false> _field1;
};

struct _Rb_tree<std::pair<std::basic_string<char>, content::NotificationObserver *>, std::pair<std::basic_string<char>, content::NotificationObserver *>, std::_Identity<std::pair<std::basic_string<char>, content::NotificationObserver *>>, std::less<std::pair<std::basic_string<char>, content::NotificationObserver *>>, std::allocator<std::pair<std::basic_string<char>, content::NotificationObserver *>>> {
    struct _Rb_tree_impl<std::less<std::pair<std::basic_string<char>, content::NotificationObserver *>>, false> _M_impl;
};

struct _Rb_tree_impl<PrefService::PreferencePathComparator, false> {
    struct PreferencePathComparator _field1;
    struct _Rb_tree_node_base _field2;
    unsigned int _field3;
};

struct _Rb_tree_impl<std::less<SyncSetupService::SyncServiceState>, false> {
    struct less<SyncSetupService::SyncServiceState> _M_key_compare;
    struct _Rb_tree_node_base _M_header;
    unsigned int _M_node_count;
};

struct _Rb_tree_impl<std::less<UIView *>, false> {
    struct less<UIView *> _M_key_compare;
    struct _Rb_tree_node_base _M_header;
    unsigned int _M_node_count;
};

struct _Rb_tree_impl<std::less<const char *>, false> {
    struct less<const char *> _field1;
    struct _Rb_tree_node_base _field2;
    unsigned int _field3;
};

struct _Rb_tree_impl<std::less<const content::URLFetcher *>, false> {
    struct less<const content::URLFetcher *> _M_key_compare;
    struct _Rb_tree_node_base _M_header;
    unsigned int _M_node_count;
};

struct _Rb_tree_impl<std::less<const void *>, false> {
    struct less<const void *> _field1;
    struct _Rb_tree_node_base _field2;
    unsigned int _field3;
};

struct _Rb_tree_impl<std::less<id<UpgradeCenterClientProtocol>>, false> {
    struct less<id<UpgradeCenterClientProtocol>> _M_key_compare;
    struct _Rb_tree_node_base _M_header;
    unsigned int _M_node_count;
};

struct _Rb_tree_impl<std::less<int>, false> {
    struct less<int> _field1;
    struct _Rb_tree_node_base _field2;
    unsigned int _field3;
};

struct _Rb_tree_impl<std::less<net::URLRequest *>, false> {
    struct less<net::URLRequest *> _field1;
    struct _Rb_tree_node_base _field2;
    unsigned int _field3;
};

struct _Rb_tree_impl<std::less<std::basic_string<char16, base::string16_char_traits>>, false> {
    struct less<std::basic_string<char16, base::string16_char_traits>> _field1;
    struct _Rb_tree_node_base _field2;
    unsigned int _field3;
};

struct _Rb_tree_impl<std::less<std::basic_string<char>>, false> {
    struct less<std::basic_string<char>> _field1;
    struct _Rb_tree_node_base _field2;
    unsigned int _field3;
};

struct _Rb_tree_impl<std::less<std::pair<std::basic_string<char>, content::NotificationObserver *>>, false> {
    struct less<std::pair<std::basic_string<char>, content::NotificationObserver *>> _M_key_compare;
    struct _Rb_tree_node_base _M_header;
    unsigned int _M_node_count;
};

struct _Rb_tree_node_base {
    int _M_color;
    struct _Rb_tree_node_base *_M_parent;
    struct _Rb_tree_node_base *_M_left;
    struct _Rb_tree_node_base *_M_right;
};

struct _Vector_impl {
    struct Record *_M_start;
    struct Record *_M_finish;
    struct Record *_M_end_of_storage;
};

struct __CTFont;

struct __CTFrame;

struct __CTLine;

struct __SecCertificate;

struct __normal_iterator<const AutocompleteMatch *, std::vector<AutocompleteMatch, std::allocator<AutocompleteMatch>>> {
    struct AutocompleteMatch *_M_current;
};

struct _opaque_pthread_mutex_t {
    long _field1;
    char _field2[40];
};

struct basic_string<char, std::char_traits<char>, std::allocator<char>> {
    struct _Alloc_hider _M_dataplus;
};

struct basic_string<unsigned short, base::string16_char_traits, std::allocator<unsigned short>> {
    struct _Alloc_hider _field1;
};

struct deque<ios::app_event::AppEvent, std::allocator<ios::app_event::AppEvent>> {
    struct _Deque_impl _M_impl;
};

struct dispatch_queue_s;

struct less<SyncSetupService::SyncServiceState>;

struct less<UIView *>;

struct less<const char *>;

struct less<const content::URLFetcher *>;

struct less<const void *>;

struct less<id<UpgradeCenterClientProtocol>>;

struct less<int>;

struct less<net::URLRequest *>;

struct less<std::basic_string<char16, base::string16_char_traits>>;

struct less<std::basic_string<char>>;

struct less<std::pair<std::basic_string<char>, content::NotificationObserver *>>;

struct list<std::basic_string<char>, std::allocator<std::basic_string<char>>> {
    struct _List_impl _field1;
};

struct map<UIView *, CGRect, std::less<UIView *>, std::allocator<std::pair<UIView *const, CGRect>>> {
    struct _Rb_tree<UIView *, std::pair<UIView *const, CGRect>, std::_Select1st<std::pair<UIView *const, CGRect>>, std::less<UIView *>, std::allocator<std::pair<UIView *const, CGRect>>> _M_t;
};

struct map<const char *, bool, std::less<const char *>, std::allocator<std::pair<const char *const, bool>>> {
    struct _Rb_tree<const char *, std::pair<const char *const, bool>, std::_Select1st<std::pair<const char *const, bool>>, std::less<const char *>, std::allocator<std::pair<const char *const, bool>>> _field1;
};

struct map<const content::URLFetcher *, void (^)(const GURL &, UIImage *), std::less<const content::URLFetcher *>, std::allocator<std::pair<const content::URLFetcher *const, void (^)(const GURL &, UIImage *)>>> {
    struct _Rb_tree<const content::URLFetcher *, std::pair<const content::URLFetcher *const, void (^)(const GURL &, UIImage *)>, std::_Select1st<std::pair<const content::URLFetcher *const, void (^)(const GURL &, UIImage *)>>, std::less<const content::URLFetcher *>, std::allocator<std::pair<const content::URLFetcher *const, void (^)(const GURL &, UIImage *)>>> _M_t;
};

struct map<const void *, TrackerCounts *, std::less<const void *>, std::allocator<std::pair<const void *const, TrackerCounts *>>> {
    struct _Rb_tree<const void *, std::pair<const void *const, TrackerCounts *>, std::_Select1st<std::pair<const void *const, TrackerCounts *>>, std::less<const void *>, std::allocator<std::pair<const void *const, TrackerCounts *>>> _field1;
};

struct map<const void *, linked_ptr<base::SupportsUserData::Data>, std::less<const void *>, std::allocator<std::pair<const void *const, linked_ptr<base::SupportsUserData::Data>>>> {
    struct _Rb_tree<const void *, std::pair<const void *const, linked_ptr<base::SupportsUserData::Data>>, std::_Select1st<std::pair<const void *const, linked_ptr<base::SupportsUserData::Data>>>, std::less<const void *>, std::allocator<std::pair<const void *const, linked_ptr<base::SupportsUserData::Data>>>> _field1;
};

struct map<int, scoped_refptr<CancelableRequestBase>, std::less<int>, std::allocator<std::pair<const int, scoped_refptr<CancelableRequestBase>>>> {
    struct _Rb_tree<int, std::pair<const int, scoped_refptr<CancelableRequestBase>>, std::_Select1st<std::pair<const int, scoped_refptr<CancelableRequestBase>>>, std::less<int>, std::allocator<std::pair<const int, scoped_refptr<CancelableRequestBase>>>> _field1;
};

struct map<std::basic_string<char16, base::string16_char_traits>, const TemplateURL *, std::less<std::basic_string<char16, base::string16_char_traits>>, std::allocator<std::pair<const std::basic_string<char16, base::string16_char_traits>, const TemplateURL *>>> {
    struct _Rb_tree<std::basic_string<char16, base::string16_char_traits>, std::pair<const std::basic_string<char16, base::string16_char_traits>, const TemplateURL *>, std::_Select1st<std::pair<const std::basic_string<char16, base::string16_char_traits>, const TemplateURL *>>, std::less<std::basic_string<char16, base::string16_char_traits>>, std::allocator<std::pair<const std::basic_string<char16, base::string16_char_traits>, const TemplateURL *>>> _field1;
};

struct map<std::basic_string<char16, base::string16_char_traits>, std::basic_string<char16, base::string16_char_traits>, std::less<std::basic_string<char16, base::string16_char_traits>>, std::allocator<std::pair<const std::basic_string<char16, base::string16_char_traits>, std::basic_string<char16, base::string16_char_traits>>>> {
    struct _Rb_tree<std::basic_string<char16, base::string16_char_traits>, std::pair<const std::basic_string<char16, base::string16_char_traits>, std::basic_string<char16, base::string16_char_traits>>, std::_Select1st<std::pair<const std::basic_string<char16, base::string16_char_traits>, std::basic_string<char16, base::string16_char_traits>>>, std::less<std::basic_string<char16, base::string16_char_traits>>, std::allocator<std::pair<const std::basic_string<char16, base::string16_char_traits>, std::basic_string<char16, base::string16_char_traits>>>> _field1;
};

struct map<std::basic_string<char>, base::Value *, std::less<std::basic_string<char>>, std::allocator<std::pair<const std::basic_string<char>, base::Value *>>> {
    struct _Rb_tree<std::basic_string<char>, std::pair<const std::basic_string<char>, base::Value *>, std::_Select1st<std::pair<const std::basic_string<char>, base::Value *>>, std::less<std::basic_string<char>>, std::allocator<std::pair<const std::basic_string<char>, base::Value *>>> _field1;
};

struct map<std::basic_string<char>, const TemplateURL *, std::less<std::basic_string<char>>, std::allocator<std::pair<const std::basic_string<char>, const TemplateURL *>>> {
    struct _Rb_tree<std::basic_string<char>, std::pair<const std::basic_string<char>, const TemplateURL *>, std::_Select1st<std::pair<const std::basic_string<char>, const TemplateURL *>>, std::less<std::basic_string<char>>, std::allocator<std::pair<const std::basic_string<char>, const TemplateURL *>>> _field1;
};

struct map<std::basic_string<char>, std::basic_string<char>, std::less<std::basic_string<char>>, std::allocator<std::pair<const std::basic_string<char>, std::basic_string<char>>>> {
    struct _Rb_tree<std::basic_string<char>, std::pair<const std::basic_string<char>, std::basic_string<char>>, std::_Select1st<std::pair<const std::basic_string<char>, std::basic_string<char>>>, std::less<std::basic_string<char>>, std::allocator<std::pair<const std::basic_string<char>, std::basic_string<char>>>> _field1;
};

struct map<std::basic_string<char>, std::set<const TemplateURL *, std::less<const TemplateURL *>, std::allocator<const TemplateURL *>>, std::less<std::basic_string<char>>, std::allocator<std::pair<const std::basic_string<char>, std::set<const TemplateURL *, std::less<const TemplateURL *>, std::allocator<const TemplateURL *>>>>> {
    struct _Rb_tree<std::basic_string<char>, std::pair<const std::basic_string<char>, std::set<const TemplateURL *, std::less<const TemplateURL *>, std::allocator<const TemplateURL *>>>, std::_Select1st<std::pair<const std::basic_string<char>, std::set<const TemplateURL *, std::less<const TemplateURL *>, std::allocator<const TemplateURL *>>>>, std::less<std::basic_string<char>>, std::allocator<std::pair<const std::basic_string<char>, std::set<const TemplateURL *, std::less<const TemplateURL *>, std::allocator<const TemplateURL *>>>>> _field1;
};

struct map<syncable::ModelType, const char *, std::less<syncable::ModelType>, std::allocator<std::pair<const syncable::ModelType, const char *>>>;

struct scoped_nsobject<AutocompleteTextFieldDelegate> {
    id _field1;
};

struct scoped_nsobject<BookmarkPanelController> {
    BookmarkPanelController *object_;
};

struct scoped_nsobject<BrowserViewControllerDependencyFactory> {
    BrowserViewControllerDependencyFactory *object_;
};

struct scoped_nsobject<CATextLayer> {
    CATextLayer *object_;
};

struct scoped_nsobject<CardSet> {
    CardSet *object_;
};

struct scoped_nsobject<CardSideSwipeView> {
    CardSideSwipeView *object_;
};

struct scoped_nsobject<CardStackLayoutManager> {
    CardStackLayoutManager *object_;
};

struct scoped_nsobject<CardTabView> {
    CardTabView *object_;
};

struct scoped_nsobject<CardView> {
    CardView *object_;
};

struct scoped_nsobject<ChromeToDeviceController> {
    ChromeToDeviceController *object_;
};

struct scoped_nsobject<ChromeToDeviceErrorController> {
    ChromeToDeviceErrorController *object_;
};

struct scoped_nsobject<ChromeToDeviceInfoBarHelper> {
    ChromeToDeviceInfoBarHelper *object_;
};

struct scoped_nsobject<ConfirmInfoBarController> {
    id _field1;
};

struct scoped_nsobject<ContextMenuController> {
    ContextMenuController *object_;
};

struct scoped_nsobject<ContextMenuHolder> {
    ContextMenuHolder *object_;
};

struct scoped_nsobject<DeterminateProgressBar> {
    DeterminateProgressBar *object_;
};

struct scoped_nsobject<ExternalAppLauncher> {
    ExternalAppLauncher *object_;
};

struct scoped_nsobject<FeedbackController> {
    FeedbackController *object_;
};

struct scoped_nsobject<FeedbackTableViewController> {
    FeedbackTableViewController *object_;
};

struct scoped_nsobject<FindBarControllerIOS> {
    FindBarControllerIOS *object_;
};

struct scoped_nsobject<FindInPageModel> {
    FindInPageModel *object_;
};

struct scoped_nsobject<FirstRunIpadAdjuster> {
    FirstRunIpadAdjuster *object_;
};

struct scoped_nsobject<FirstVisitOverlay> {
    FirstVisitOverlay *object_;
};

struct scoped_nsobject<GIPSpeechWindowController> {
    GIPSpeechWindowController *object_;
};

struct scoped_nsobject<GestureStateTracker> {
    GestureStateTracker *object_;
};

struct scoped_nsobject<HttpLoginDialogControllerFactory> {
    HttpLoginDialogControllerFactory *object_;
};

struct scoped_nsobject<HttpProtocolHandlerProxy> {
    HttpProtocolHandlerProxy *object_;
};

struct scoped_nsobject<IncognitoPanelController> {
    IncognitoPanelController *object_;
};

struct scoped_nsobject<InfoBarView> {
    InfoBarView *object_;
};

struct scoped_nsobject<Interstitial> {
    Interstitial *object_;
};

struct scoped_nsobject<MostVisitedPanelController> {
    MostVisitedPanelController *object_;
};

struct scoped_nsobject<NSArray> {
    NSArray *object_;
};

struct scoped_nsobject<NSAttributedString> {
    NSAttributedString *object_;
};

struct scoped_nsobject<NSMutableArray> {
    NSMutableArray *object_;
};

struct scoped_nsobject<NSMutableDictionary> {
    NSMutableDictionary *object_;
};

struct scoped_nsobject<NSMutableSet> {
    NSMutableSet *object_;
};

struct scoped_nsobject<NSMutableURLRequest> {
    NSMutableURLRequest *object_;
};

struct scoped_nsobject<NSNotificationCenter> {
    NSNotificationCenter *object_;
};

struct scoped_nsobject<NSObject> {
    NSObject *object_;
};

struct scoped_nsobject<NSOperationQueue> {
    id _field1;
};

struct scoped_nsobject<NSRecursiveLock> {
    NSRecursiveLock *object_;
};

struct scoped_nsobject<NSString> {
    NSString *object_;
};

struct scoped_nsobject<NSTimer> {
    NSTimer *object_;
};

struct scoped_nsobject<NSURL> {
    NSURL *object_;
};

struct scoped_nsobject<NewTabPagePanelController> {
    NewTabPagePanelController *object_;
};

struct scoped_nsobject<NoTabsController> {
    NoTabsController *object_;
};

struct scoped_nsobject<NoTabsToolbarController> {
    NoTabsToolbarController *object_;
};

struct scoped_nsobject<OmniboxTextFieldIOS> {
    id _field1;
};

struct scoped_nsobject<OpenTabsPanelController> {
    OpenTabsPanelController *object_;
};

struct scoped_nsobject<PageInfoViewController> {
    PageInfoViewController *object_;
};

struct scoped_nsobject<PasswordController> {
    PasswordController *object_;
};

struct scoped_nsobject<PopupTableViewController> {
    id _field1;
};

struct scoped_nsobject<PrerenderController> {
    PrerenderController *object_;
};

struct scoped_nsobject<SelectedTextLabel> {
    SelectedTextLabel *object_;
};

struct scoped_nsobject<SessionEntry> {
    SessionEntry *object_;
};

struct scoped_nsobject<SessionServiceIOS> {
    SessionServiceIOS *object_;
};

struct scoped_nsobject<SettingsLinkController> {
    SettingsLinkController *object_;
};

struct scoped_nsobject<SettingsMultiLabelView> {
    SettingsMultiLabelView *object_;
};

struct scoped_nsobject<SettingsNavigationController> {
    SettingsNavigationController *object_;
};

struct scoped_nsobject<SideSwipeGestureRecognizer> {
    SideSwipeGestureRecognizer *object_;
};

struct scoped_nsobject<SnapshotManager> {
    SnapshotManager *object_;
};

struct scoped_nsobject<SpeechInputLocales> {
    SpeechInputLocales *object_;
};

struct scoped_nsobject<StackCard> {
    StackCard *object_;
};

struct scoped_nsobject<StackViewController> {
    StackViewController *object_;
};

struct scoped_nsobject<StackViewToolbarController> {
    StackViewToolbarController *object_;
};

struct scoped_nsobject<SyncErrorController> {
    SyncErrorController *object_;
};

struct scoped_nsobject<SyncNotificationBridge> {
    id _field1;
};

struct scoped_nsobject<Tab> {
    Tab *object_;
};

struct scoped_nsobject<TabModel> {
    TabModel *object_;
};

struct scoped_nsobject<TabModelOrderController> {
    TabModelOrderController *object_;
};

struct scoped_nsobject<TabSpinnerImageProvider> {
    TabSpinnerImageProvider *object_;
};

struct scoped_nsobject<TabStripController> {
    TabStripController *object_;
};

struct scoped_nsobject<TabView> {
    TabView *object_;
};

struct scoped_nsobject<TableViewErrorFooter> {
    TableViewErrorFooter *object_;
};

struct scoped_nsobject<ThumbnailHelper> {
    ThumbnailHelper *object_;
};

struct scoped_nsobject<ToolsPopupController> {
    ToolsPopupController *object_;
};

struct scoped_nsobject<TouchTrackingRecognizer> {
    TouchTrackingRecognizer *object_;
};

struct scoped_nsobject<UIActionSheet> {
    UIActionSheet *object_;
};

struct scoped_nsobject<UIAlertView> {
    UIAlertView *object_;
};

struct scoped_nsobject<UIBarButtonItem> {
    UIBarButtonItem *object_;
};

struct scoped_nsobject<UIFont> {
    UIFont *object_;
};

struct scoped_nsobject<UIGestureRecognizer> {
    UIGestureRecognizer *object_;
};

struct scoped_nsobject<UIImage> {
    UIImage *object_;
};

struct scoped_nsobject<UIImageView> {
    UIImageView *object_;
};

struct scoped_nsobject<UILabel> {
    UILabel *object_;
};

struct scoped_nsobject<UIPopoverController> {
    UIPopoverController *object_;
};

struct scoped_nsobject<UISwitch> {
    UISwitch *object_;
};

struct scoped_nsobject<UITableViewCell> {
    UITableViewCell *object_;
};

struct scoped_nsobject<UITapGestureRecognizer> {
    UITapGestureRecognizer *object_;
};

struct scoped_nsobject<UITextField> {
    UITextField *object_;
};

struct scoped_nsobject<UIView> {
    UIView *object_;
};

struct scoped_nsobject<UIViewController> {
    UIViewController *object_;
};

struct scoped_nsobject<UIWebView> {
    UIWebView *object_;
};

struct scoped_nsobject<VerticalViewScroller> {
    VerticalViewScroller *object_;
};

struct scoped_nsobject<WebToolbarController> {
    WebToolbarController *object_;
};

struct scoped_nsobject<id> {
    id object_;
};

struct scoped_nsprotocol<id<NativeContent>> {
    id object_;
};

struct scoped_nsprotocol<void (^)(UIImage *)> {
    id object_;
    void _field1;
};

struct scoped_ptr<AutocompleteEditModel> {
    struct AutocompleteEditModel *_field1;
};

struct scoped_ptr<AutocompletePopupModel> {
    struct AutocompletePopupModel *_field1;
};

struct scoped_ptr<BlockedPopupHandler> {
    struct BlockedPopupHandler *ptr_;
};

struct scoped_ptr<BookmarkEditModelBridge> {
    struct BookmarkEditModelBridge *ptr_;
};

struct scoped_ptr<BookmarkModelBridge> {
    struct BookmarkModelBridge *ptr_;
};

struct scoped_ptr<BrowserBookmarkModelBridge> {
    struct BrowserBookmarkModelBridge *ptr_;
};

struct scoped_ptr<ChromeToDeviceInfoBarDelegate::Delegate> {
    struct Delegate *ptr_;
};

struct scoped_ptr<ChromeToDeviceInfoBarNotificationObserver> {
    struct ChromeToDeviceInfoBarNotificationObserver *ptr_;
};

struct scoped_ptr<ChromeToDeviceObserver> {
    struct ChromeToDeviceObserver *ptr_;
};

struct scoped_ptr<ChromeToDeviceServiceStatusObserver> {
    struct ChromeToDeviceServiceStatusObserver *ptr_;
};

struct scoped_ptr<FaviconHandler> {
    struct FaviconHandler *ptr_;
};

struct scoped_ptr<FaviconHandlerDelegateBridge> {
    struct FaviconHandlerDelegateBridge *ptr_;
};

struct scoped_ptr<FeedbackFetcherDelegate> {
    struct FeedbackFetcherDelegate *ptr_;
};

struct scoped_ptr<InfoBarContainerDelegate> {
    struct InfoBarContainerDelegate *ptr_;
};

struct scoped_ptr<InfoBarContainerIOS> {
    struct InfoBarContainerIOS *ptr_;
};

struct scoped_ptr<InfoBarDelegate> {
    struct InfoBarDelegate *ptr_;
};

struct scoped_ptr<InfoBarTabHelper> {
    struct InfoBarTabHelper *ptr_;
};

struct scoped_ptr<LocationBarViewIOS> {
    struct LocationBarViewIOS *ptr_;
};

struct scoped_ptr<MostVisitedCallbackBridge> {
    struct MostVisitedCallbackBridge *ptr_;
};

struct scoped_ptr<NotificationObserverBridge> {
    struct NotificationObserverBridge *ptr_;
};

struct scoped_ptr<OmniboxPopupViewIOS> {
    struct OmniboxPopupViewIOS *_field1;
};

struct scoped_ptr<OmniboxViewIOS> {
    struct OmniboxViewIOS *_field1;
};

struct scoped_ptr<OpenTabsPanel::ChangeListenerBridge> {
    struct ChangeListenerBridge *ptr_;
};

struct scoped_ptr<PageInfoModel> {
    struct PageInfoModel *ptr_;
};

struct scoped_ptr<PageInfoModelObserver> {
    struct PageInfoModelObserver *ptr_;
};

struct scoped_ptr<PasswordManager> {
    struct PasswordManager *ptr_;
};

struct scoped_ptr<PasswordManagerDelegate> {
    struct PasswordManagerDelegate *ptr_;
};

struct scoped_ptr<PrefModelAssociator> {
    struct PrefModelAssociator *_field1;
};

struct scoped_ptr<PrefNotifierImpl> {
    struct PrefNotifierImpl *_field1;
};

struct scoped_ptr<PrefSetObserver> {
    struct PrefSetObserver *_field1;
};

struct scoped_ptr<PrefValueStore> {
    struct PrefValueStore *_field1;
};

struct scoped_ptr<ProgressBarAnimationDelegate> {
    struct ProgressBarAnimationDelegate *ptr_;
};

struct scoped_ptr<RemoteNotificationRegistrar> {
    struct RemoteNotificationRegistrar *ptr_;
};

struct scoped_ptr<SSLErrorInfo> {
    struct SSLErrorInfo *ptr_;
};

struct scoped_ptr<SavePasswordsConsumer> {
    struct SavePasswordsConsumer *ptr_;
};

struct scoped_ptr<SyncChangeProcessor> {
    struct SyncChangeProcessor *_field1;
};

struct scoped_ptr<SyncInitialSetupController> {
    struct SyncInitialSetupController *ptr_;
};

struct scoped_ptr<SyncObserverBridge> {
    struct SyncObserverBridge *ptr_;
};

struct scoped_ptr<TabContentsWrapper> {
    struct TabContentsWrapper *ptr_;
};

struct scoped_ptr<TabModelSyncedWindowDelegate> {
    struct TabModelSyncedWindowDelegate *ptr_;
};

struct scoped_ptr<TabRestoreServiceDelegateIOS> {
    struct TabRestoreServiceDelegateIOS *ptr_;
};

struct scoped_ptr<TabSyncedTabDelegate> {
    struct TabSyncedTabDelegate *ptr_;
};

struct scoped_ptr<TemplateURL> {
    struct TemplateURL *_field1;
};

struct scoped_ptr<UpgradeRecommendedDetails> {
    struct {
    } *ptr_;
};

struct scoped_ptr<UserActionRateCounter> {
    struct UserActionRateCounter *ptr_;
};

struct scoped_ptr<WWANStateObserverBridge> {
    struct WWANStateObserverBridge *ptr_;
};

struct scoped_ptr<content::NavigationController> {
    struct NavigationController *ptr_;
};

struct scoped_ptr<content::NavigationEntry> {
    struct NavigationEntry *ptr_;
};

struct scoped_ptr<content::WebContents> {
    struct WebContents *ptr_;
};

struct scoped_ptr<gfx::Image> {
    struct Image *_field1;
};

struct scoped_ptr<ios::ChromeMain> {
    struct ChromeMain *ptr_;
};

struct scoped_ptr<most_visited::Bridge> {
    struct Bridge *ptr_;
};

struct scoped_ptr<ui::Animation> {
    struct Animation *ptr_;
};

struct scoped_refptr<ChromeToDeviceBackendHost> {
    struct ChromeToDeviceBackendHost *_field1;
};

struct scoped_refptr<CrashUploadList> {
    struct CrashUploadList *ptr_;
};

struct scoped_refptr<DefaultPrefStore> {
    struct DefaultPrefStore *_field1;
};

struct scoped_refptr<HttpProtocolHandlerCore> {
    struct HttpProtocolHandlerCore *ptr_;
};

struct scoped_refptr<ObserverListThreadSafe<base::SystemMonitor::DevicesChangedObserver>> {
    struct ObserverListThreadSafe<base::SystemMonitor::DevicesChangedObserver> *_field1;
};

struct scoped_refptr<ObserverListThreadSafe<base::SystemMonitor::PowerObserver>> {
    struct ObserverListThreadSafe<base::SystemMonitor::PowerObserver> *_field1;
};

struct scoped_refptr<PersistentPrefStore> {
    struct PersistentPrefStore *_field1;
};

struct scoped_refptr<RequestTracker> {
    struct RequestTracker *ptr_;
};

struct scoped_refptr<VoiceSearchController> {
    struct VoiceSearchController *ptr_;
};

struct scoped_refptr<WebDataService> {
    struct WebDataService *_field1;
};

struct scoped_refptr<base::MessageLoopProxy> {
    struct MessageLoopProxy *_field1;
};

struct scoped_refptr<base::internal::BindStateBase> {
    struct BindStateBase *_field1;
};

struct scoped_refptr<base::internal::WeakReference::Flag> {
    struct Flag *_field1;
};

struct scoped_refptr<history::HistoryAddPageArgs>;

struct scoped_refptr<net::AuthChallengeInfo> {
    struct AuthChallengeInfo *ptr_;
};

struct scoped_refptr<net::URLRequestContextGetter> {
    struct URLRequestContextGetter *ptr_;
};

struct scoped_refptr<net::X509Certificate> {
    struct X509Certificate *ptr_;
};

struct scoped_refptr<ui::AnimationContainer> {
    struct AnimationContainer *_field1;
};

struct set<PrefService::Preference *, PrefService::PreferencePathComparator, std::allocator<PrefService::Preference *>> {
    struct _Rb_tree<PrefService::Preference *, PrefService::Preference *, std::_Identity<PrefService::Preference *>, PrefService::PreferencePathComparator, std::allocator<PrefService::Preference *>> _field1;
};

struct set<SyncSetupService::SyncServiceState, std::less<SyncSetupService::SyncServiceState>, std::allocator<SyncSetupService::SyncServiceState>> {
    struct _Rb_tree<SyncSetupService::SyncServiceState, SyncSetupService::SyncServiceState, std::_Identity<SyncSetupService::SyncServiceState>, std::less<SyncSetupService::SyncServiceState>, std::allocator<SyncSetupService::SyncServiceState>> _M_t;
};

struct set<id<UpgradeCenterClientProtocol>, std::less<id<UpgradeCenterClientProtocol>>, std::allocator<id<UpgradeCenterClientProtocol>>> {
    struct _Rb_tree<id<UpgradeCenterClientProtocol>, id<UpgradeCenterClientProtocol>, std::_Identity<id<UpgradeCenterClientProtocol>>, std::less<id<UpgradeCenterClientProtocol>>, std::allocator<id<UpgradeCenterClientProtocol>>> _M_t;
};

struct set<net::URLRequest *, std::less<net::URLRequest *>, std::allocator<net::URLRequest *>> {
    struct _Rb_tree<net::URLRequest *, net::URLRequest *, std::_Identity<net::URLRequest *>, std::less<net::URLRequest *>, std::allocator<net::URLRequest *>> _field1;
};

struct set<std::pair<std::basic_string<char>, content::NotificationObserver *>, std::less<std::pair<std::basic_string<char>, content::NotificationObserver *>>, std::allocator<std::pair<std::basic_string<char>, content::NotificationObserver *>>> {
    struct _Rb_tree<std::pair<std::basic_string<char>, content::NotificationObserver *>, std::pair<std::basic_string<char>, content::NotificationObserver *>, std::_Identity<std::pair<std::basic_string<char>, content::NotificationObserver *>>, std::less<std::pair<std::basic_string<char>, content::NotificationObserver *>>, std::allocator<std::pair<std::basic_string<char>, content::NotificationObserver *>>> _M_t;
};

struct vector<AutocompleteMatch, std::allocator<AutocompleteMatch>> {
    struct _Vector_impl _M_impl;
};

struct vector<AutocompleteMatch::ACMatchClassification, std::allocator<AutocompleteMatch::ACMatchClassification>> {
    struct _Vector_impl _field1;
};

struct vector<BlockedPopupHandler::Popup, std::allocator<BlockedPopupHandler::Popup>> {
    struct _Vector_impl _field1;
};

struct vector<BookmarkNode *, std::allocator<BookmarkNode *>> {
    struct _Vector_impl _field1;
};

struct vector<ChromeToDeviceObserver *, std::allocator<ChromeToDeviceObserver *>> {
    struct _Vector_impl _field1;
};

struct vector<ChromeToDeviceServiceStatusObserver *, std::allocator<ChromeToDeviceServiceStatusObserver *>> {
    struct _Vector_impl _field1;
};

struct vector<DistantSession *, std::allocator<DistantSession *>> {
    struct _Vector_impl _M_impl;
};

struct vector<DistantTab *, std::allocator<DistantTab *>> {
    struct _Vector_impl _field1;
};

struct vector<FaviconURL, std::allocator<FaviconURL>> {
    struct _Vector_impl _field1;
};

struct vector<InfoBarDelegate *, std::allocator<InfoBarDelegate *>> {
    struct _Vector_impl _field1;
};

struct vector<PasswordStore::Observer *, std::allocator<PasswordStore::Observer *>> {
    struct _Vector_impl _field1;
};

struct vector<TabNavigation, std::allocator<TabNavigation>> {
    struct _Vector_impl _field1;
};

struct vector<TemplateURLServiceObserver *, std::allocator<TemplateURLServiceObserver *>> {
    struct _Vector_impl _field1;
};

struct vector<TrackerCounts *, std::allocator<TrackerCounts *>> {
    struct _Vector_impl _field1;
};

struct vector<__SecCertificate *, std::allocator<__SecCertificate *>> {
    struct _Vector_impl _field1;
};

struct vector<base::Value *, std::allocator<base::Value *>> {
    struct _Vector_impl _M_impl;
};

struct vector<const BookmarkNode *, std::allocator<const BookmarkNode *>> {
    struct _Vector_impl _M_impl;
};

struct vector<const TemplateURL *, std::allocator<const TemplateURL *>> {
    struct _Vector_impl _field1;
};

struct vector<content::NotificationRegistrar::Record, std::allocator<content::NotificationRegistrar::Record>> {
    struct _Vector_impl _M_impl;
};

struct vector<content::SpeechRecognitionHypothesis, std::allocator<content::SpeechRecognitionHypothesis>> {
    struct _Vector_impl _field1;
};

struct vector<history::MostVisitedURL, std::allocator<history::MostVisitedURL>> {
    struct _Vector_impl _M_impl;
};

struct vector<history::URLVisitedDetails, std::allocator<history::URLVisitedDetails>> {
    struct _Vector_impl _field1;
};

struct vector<id, std::allocator<id>> {
    struct _Vector_impl _M_impl;
};

struct vector<int, std::allocator<int>> {
    struct _Vector_impl _M_impl;
};

struct vector<net::SHA1Fingerprint, std::allocator<net::SHA1Fingerprint>> {
    struct _Vector_impl _M_impl;
};

struct vector<scoped_refptr<history::HistoryAddPageArgs>, std::allocator<scoped_refptr<history::HistoryAddPageArgs>>> {
    struct _Vector_impl _M_impl;
};

struct vector<std::basic_string<char16, base::string16_char_traits>, std::allocator<std::basic_string<char16, base::string16_char_traits>>> {
    struct _Vector_impl _field1;
};

struct vector<std::basic_string<char>, std::allocator<std::basic_string<char>>> {
    struct _Vector_impl _field1;
};

struct vector<webkit::forms::FormField, std::allocator<webkit::forms::FormField>> {
    struct _Vector_impl _field1;
};

struct vector<webkit::forms::PasswordForm *, std::allocator<webkit::forms::PasswordForm *>> {
    struct _Vector_impl _M_impl;
};

struct vector<webkit::forms::PasswordForm, std::allocator<webkit::forms::PasswordForm>> {
    struct _Vector_impl _field1;
};

typedef struct {
    struct GURL _field1;
    struct basic_string<char, std::char_traits<char>, std::allocator<char>> _field2;
} CDAnonymousStruct2;

typedef struct {
    unsigned long _field1;
    id *_field2;
    unsigned long *_field3;
    unsigned long _field4[5];
} CDAnonymousStruct1;

