/*
 *     Generated by class-dump 3.1.2.
 *
 *     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2007 by Steve Nygard.
 */

#import "_AudioQueueAllocateBuffer.h"

#import "InterstitialDelegate-Protocol.h"
#import "RequestTrackerDelegate-Protocol.h"
#import "WebDelegate-Protocol.h"

@class SessionController, TabModel, WebController;

@interface Tab : _AudioQueueAllocateBuffer <WebDelegate, RequestTrackerDelegate, InterstitialDelegate>
{
    SessionController *history_;
    TabModel *parentTabModel_;
    WebController *webController_;
    struct Profile *profile_;
    struct scoped_ptr<FaviconHandlerDelegateBridge> faviconDelegate_;
    struct scoped_ptr<FaviconHandler> faviconHandler_;
    struct scoped_ptr<FaviconHandler> touchIconHandler_;
    struct scoped_ptr<content::WebContents> webContents_;
    struct scoped_ptr<InfoBarTabHelper> infoBarTabHelper_;
    struct scoped_ptr<InfoBarDelegate> infoBarToDisplay_;
    struct scoped_ptr<TabSyncedTabDelegate> syncedTabDelegate_;
    struct scoped_refptr<RequestTracker> requestTracker_;
    struct scoped_nsobject<id> requestTrackerCallback_;
    struct scoped_ptr<content::NavigationController> navigationController_;
    struct scoped_ptr<TabContentsWrapper> tabContentsWrapper_;
    struct scoped_nsobject<ChromeToDeviceInfoBarHelper> chromeToDeviceInfoBarHelper_;
    BOOL isUserNavigationEvent_;
    struct vector<scoped_refptr<history::HistoryAddPageArgs>, std::allocator<scoped_refptr<history::HistoryAddPageArgs>>> addPageVector_;
    BOOL isPrerenderTab_;
    float loadProgressFraction_;
    BOOL isPageLoading_;
    struct ObjCPropertyReleaser propertyReleaser_Tab_;
    id <TabDelegate> delegate_;
    id <InfoBarOverlayProvider> infoBarOverlayProvider_;
    BOOL useDesktopUserAgent_;
}

- (void)setInfoBarOverlayProvider:(id)fp8;
- (id)infoBarOverlayProvider;
- (void)setDelegate:(id)fp8;
- (id)delegate;
- (float)loadProgressFraction;
- (void)setWebController:(id)fp8;
- (id)webController;
- (id)history;
- (id).cxx_construct;
- (void).cxx_destruct;
- (BOOL)isPrerenderTab;
- (void)discardPrerender;
- (void)webWillPostRequest:(id)fp8;
- (void)setIsLoading:(BOOL)fp8;
- (float)infoBarOverlayYOffset;
- (id)infoBarOverlayView;
- (struct InfoBarTabHelper *)infoBarTabHelper;
- (void)sendSyncedTabDelegateChanged;
- (struct SyncedTabDelegate *)syncedTabDelegate;
- (void)updateLastVisitedTimestamp;
- (double)lastVisitedTimestamp;
- (void)onUpdateFavicons:(const struct vector<FaviconURL, std::allocator<FaviconURL>> *)fp8 touchIcons:(const struct vector<FaviconURL, std::allocator<FaviconURL>> *)fp12;
- (void)titleDidChange:(id)fp8;
- (void)webLoadCancelled:(id)fp8;
- (void)webDidFinishWithURL:(id)fp8 loadSuccess:(BOOL)fp12;
- (void)webDidStartLoadingShouldUpdateHistory:(BOOL)fp8;
- (void)webCancelStartLoadingRequest;
- (void)webWillStartLoadingRequest:(id)fp8 transition:(int)fp12;
- (void)webPageStop:(id)fp8;
- (void)webPageOrderedClose:(id)fp8;
- (void)webPageOrderedClose;
- (void)webPageOrderedOpen:(id)fp8 referrer:(id)fp12 windowName:(id)fp16 inBackground:(BOOL)fp20;
- (void)webPageWrite:(id)fp8 html:(id)fp12;
- (int)currentNavigationIndex;
- (id)currentSessionID;
- (id)currentHttpHeaders;
- (id)currentPOSTData;
- (id)currentState;
- (id)currentURLReferrer;
- (int)currentTransition;
- (id)currentURL;
- (void)reloadWebViewAndURL;
- (void)enableDesktopUserAgent;
- (BOOL)useDesktopUserAgent;
- (id)currentRedirectedUrls;
- (void)clearCertificates;
- (void)updatedProgress:(float)fp8;
- (void)certificateUsed:(struct X509Certificate *)fp8 forHost:(const struct basic_string<char, std::char_traits<char>, std::allocator<char>> *)fp12;
- (void)handleXAutoLogin:(const struct basic_string<char, std::char_traits<char>, std::allocator<char>> *)fp8;
- (void)updatedSSLStatus:(const struct SSLStatus *)fp8 forPageUrl:(const struct GURL *)fp12 userInfo:(id)fp16;
- (void)presentSSLError:(const struct SSLErrorInfo *)fp8 forSSLStatus:(const struct SSLStatus *)fp12 onUrl:(const struct GURL *)fp16 recoverable:(BOOL)fp20 callback:(id)fp(null);
- (void)presentSpoofingErrorWithURL:(id)fp8;
- (void)presentInterstitial:(id)fp8 sslStatus:(const struct SSLStatus *)fp12;
- (void)dismiss;
- (void)proceed;
- (void)doNotProceed;
- (void)restoreStateFromHistory;
- (void)recordStateInHistory;
- (void)replaceStateWithPageURL:(id)fp8 stateObject:(id)fp12;
- (void)pushStateWithPageURL:(id)fp8 stateObject:(id)fp12;
- (void)finishHistoryNavigationFromEntry:(id)fp8;
- (void)dispatchPopstateEventIfNecessary;
- (void)goDelta:(int)fp8;
- (BOOL)canGoForward;
- (BOOL)canGoBack;
- (void)goForward;
- (void)goBack;
- (void)updateDesktopUserAgentForEntry:(id)fp8 fromEntry:(id)fp12;
- (id)updateUrlForHistoryNavigationFromURL:(id)fp8 toURL:(id)fp12;
- (void)close;
- (BOOL)runUnloadListenerBeforeClosing;
- (void)stopLoading;
- (void)loadHTML:(id)fp8;
- (void)reload;
- (void)openJavascript:(id)fp8;
- (void)loadSessionTab:(const struct SessionTab *)fp8;
- (void)loadURL:(id)fp8 referrer:(id)fp12 transition:(int)fp16 rendererInitiated:(BOOL)fp20;
- (void)didDownloadFavicon:(int)fp8 url:(const struct GURL *)fp12 image:(id)fp16;
- (void)updateFaviconURLsForURL:(id)fp8;
- (void)commitCachedEntriesToHistoryDB;
- (void)addCurrentEntryToHistoryDB;
- (void)saveTitleToHistoryDB;
- (void)updateTitle:(id)fp8;
- (void)broadcastNavigationEntryCommitted;
- (void)updateChromeToDeviceInfoBarSettings;
- (void)broadcastTabChanged;
- (void)setIsPrerenderTab:(BOOL)fp8;
- (void)setHistory:(id)fp8;
- (id)view;
- (id)favicon;
-     // Error parsing type: ^{FaviconHandler=^^?{CancelableRequestConsumerT<int, 0>=^^?{map<CancelableRequestConsumerTSimple<int>::PendingRequest, int, std::less<CancelableRequestConsumerTSimple<int>::PendingRequest>, std::allocator<std::pair<const CancelableRequestConsumerTSimple<int>::PendingRequest, int> > >={_Rb_tree<CancelableRequestConsumerTSimple<int>::PendingRequest, std::pair<const CancelableRequestConsumerTSimple<int>::PendingRequest, int>, std::_Select1st<std::pair<const CancelableRequestConsumerTSimple<int>::PendingRequest, int> >, std::less<CancelableRequestConsumerTSimple<int>::PendingRequest>, std::allocator<std::pair<const CancelableRequestConsumerTSimple<int>::PendingRequest, int> > >={_Rb_tree_impl<std::less<CancelableRequestConsumerTSimple<int>::PendingRequest>, false>={less<CancelableRequestConsumerTSimple<int>::PendingRequest>=}{_Rb_tree_node_base=i^{_Rb_tree_node_base}^{_Rb_tree_node_base}^{_Rb_tree_node_base}}I}}}{PendingRequest=^{CancelableRequestProvider}i}}{GURL={basic_string<char, std::char_traits<char>, std::allocator<char> >={_Alloc_hider=*}}B{Parsed={Component=ii}{Component=ii}{Component=ii}{Component=ii}{Component=ii}{Component=ii}{Component=ii}{Component=ii}^{Parsed}}^{GURL}}BB{map<int, FaviconHandler::DownloadRequest, std::less<int>, std::allocator<std::pair<const int, FaviconHandler::DownloadRequest> > >={_Rb_tree<int, std::pair<const int, FaviconHandler::DownloadRequest>, std::_Select1st<std::pair<const int, FaviconHandler::DownloadRequest> >, std::less<int>, std::allocator<std::pair<const int, FaviconHandler::DownloadRequest> > >={_Rb_tree_impl<std::less<int>, false>={less<int>=}{_Rb_tree_node_base=i^{_Rb_tree_node_base}^{_Rb_tree_node_base}^{_Rb_tree_node_base}}I}}}i{deque<FaviconURL, std::allocator<FaviconURL> >={_Deque_impl=^^{FaviconURL}I{_Deque_iterator<FaviconURL, FaviconURL &, FaviconURL *>=^{FaviconURL}^{FaviconURL}^{FaviconURL}^^{FaviconURL}}{_Deque_iterator<FaviconURL, FaviconURL &, FaviconURL *>=^{FaviconURL}^{FaviconURL}^{FaviconURL}^^{FaviconURL}}}}{FaviconData=B{scoped_refptr<RefCountedMemory>=^{RefCountedMemory}}B{GURL={basic_string<char, std::char_traits<char>, std::allocator<char> >={_Alloc_hider=*}}B{Parsed={Component=ii}{Component=ii}{Component=ii}{Component=ii}{Component=ii}{Component=ii}{Component=ii}{Component=ii}^{Parsed}}^{GURL}}i}^{Profile}^{FaviconHandlerDelegate}{FaviconCandidate={GURL={basic_string<char, std::char_traits<char>, std::allocator<char> >={_Alloc_hider=*}}B{Parsed={Component=ii}{Component=ii}{Component=ii}{Component=ii}{Component=ii}{Component=ii}{Component=ii}{Component=ii}^{Parsed}}^{GURL}}{GURL={basic_string<char, std::char_traits<char>, std::allocator<char> >={_Alloc_hider=*}}B{Parsed={Component=ii}{Component=ii}{Component=ii}{Component=ii}{Component=ii}{Component=ii}{Component=ii}{Component=ii}^{Parsed}}^{GURL}}{Image={scoped_refptr<gfx::internal::ImageStorage>=^{ImageStorage}}}ii}}8@0:4, name: faviconHandler
- (struct TabContentsWrapper *)tabContentsWrapper;
- (struct WebContents *)webContents;
- (struct NavigationController *)navigationController;
- (id)windowName;
- (id)title;
- (id)referrer;
- (id)url;
- (id)description;
- (void)setParentTabModel:(id)fp8;
- (id)initWithSessionController:(id)fp8 model:(id)fp12 profile:(struct Profile *)fp16;
- (id)initWithURL:(id)fp8 referrer:(id)fp12 windowName:(id)fp16 transition:(int)fp20 opener:(id)fp24 model:(id)fp28 profile:(struct Profile *)fp32;

@end

