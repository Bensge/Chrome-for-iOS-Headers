/*
 *     Generated by class-dump 3.1.2.
 *
 *     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2007 by Steve Nygard.
 */

#import "_AudioQueueAllocateBuffer.h"

#import "BookmarkFolderAddViewControllerDelegate-Protocol.h"

@class BookmarkFolderAddViewController;

@interface BookmarkFolderViewController : _AudioQueueAllocateBuffer <BookmarkFolderAddViewControllerDelegate>
{
    id <BookmarkFolderViewControllerDelegate> folderDelegate_;
    const struct BookmarkNode *editedNode_;
    const struct BookmarkNode *selectedFolder_;
    // Error parsing type: ^{BookmarkModel=^^?^^?{NotificationRegistrar={vector<content::NotificationRegistrar::Record, std::allocator<content::NotificationRegistrar::Record> >={_Vector_impl=^{Record}^{Record}^{Record}}}}^{Profile}BB{BookmarkNode=^^?{basic_string<unsigned short, base::string16_char_traits, std::allocator<unsigned short> >={_Alloc_hider=^S}}^{BookmarkNode}{ScopedVector<BookmarkNode>={vector<BookmarkNode *, std::allocator<BookmarkNode *> >={_Vector_impl=^^{BookmarkNode}^^{BookmarkNode}^^{BookmarkNode}}}}q{GURL={basic_string<char, std::char_traits<char>, std::allocator<char> >={_Alloc_hider=*}}B{Parsed={Component=ii}{Component=ii}{Component=ii}{Component=ii}{Component=ii}{Component=ii}{Component=ii}{Component=ii}^{Parsed}}^{GURL}}i{Time=q}{Time=q}{scoped_ptr<gfx::Image>=^{Image}}iBi}^{BookmarkPermanentNode}^{BookmarkPermanentNode}^{BookmarkPermanentNode}q{ObserverList<BookmarkModelObserver, false>={WeakReferenceOwner={scoped_refptr<base::internal::WeakReference::Flag>=^{Flag}}}{vector<BookmarkModelObserver *, std::allocator<BookmarkModelObserver *> >={_Vector_impl=^^{BookmarkModelObserver}^^{BookmarkModelObserver}^^{BookmarkModelObserver}}}ii}{multiset<BookmarkNode *, BookmarkModel::NodeURLComparator, std::allocator<BookmarkNode *> >={_Rb_tree<BookmarkNode *, BookmarkNode *, std::_Identity<BookmarkNode *>, BookmarkModel::NodeURLComparator, std::allocator<BookmarkNode *> >={_Rb_tree_impl<BookmarkModel::NodeURLComparator, false>={NodeURLComparator=}{_Rb_tree_node_base=i^{_Rb_tree_node_base}^{_Rb_tree_node_base}^{_Rb_tree_node_base}}I}}}{Lock={LockImpl={_opaque_pthread_mutex_t=l[40c]}}}{CancelableRequestConsumerTSimple<BookmarkNode *>=^^?{map<CancelableRequestConsumerTSimple<BookmarkNode *>::PendingRequest, BookmarkNode *, std::less<CancelableRequestConsumerTSimple<BookmarkNode *>::PendingRequest>, std::allocator<std::pair<const CancelableRequestConsumerTSimple<BookmarkNode *>::PendingRequest, BookmarkNode *> > >={_Rb_tree<CancelableRequestConsumerTSimple<BookmarkNode *>::PendingRequest, std::pair<const CancelableRequestConsumerTSimple<BookmarkNode *>::PendingRequest, BookmarkNode *>, std::_Select1st<std::pair<const CancelableRequestConsumerTSimple<BookmarkNode *>::PendingRequest, BookmarkNode *> >, std::less<CancelableRequestConsumerTSimple<BookmarkNode *>::PendingRequest>, std::allocator<std::pair<const CancelableRequestConsumerTSimple<BookmarkNode *>::PendingRequest, BookmarkNode *> > >={_Rb_tree_impl<std::less<CancelableRequestConsumerTSimple<BookmarkNode *>::PendingRequest>, false>={less<CancelableRequestConsumerTSimple<BookmarkNode *>::PendingRequest>=}{_Rb_tree_node_base=i^{_Rb_tree_node_base}^{_Rb_tree_node_base}^{_Rb_tree_node_base}}I}}}{PendingRequest=^{CancelableRequestProvider}i}}{scoped_refptr<BookmarkStorage>=^{BookmarkStorage}}{scoped_ptr<BookmarkIndex>=^{BookmarkIndex}}{WaitableEvent={scoped_refptr<base::WaitableEvent::WaitableEventKernel>=^{WaitableEventKernel}}}i{scoped_ptr<BookmarkExpandedStateTracker>=^{BookmarkExpandedStateTracker}}}, name: bookmarks_
    BOOL allowNewFolders_;
    BookmarkFolderAddViewController *folderAddController_;
    struct vector<const BookmarkNode *, std::allocator<const BookmarkNode *>> folders_;
    struct ObjCPropertyReleaser propertyReleaser_BookmarkFolderViewController_;
}

- (void)setFolderAddController:(id)fp8;
- (id)folderAddController;
- (void)setFolderDelegate:(id)fp8;
- (id)folderDelegate;
- (id).cxx_construct;
- (void).cxx_destruct;
- (void)createNewFolder:(id)fp8;
- (void)bookmarkFolderEditor:(id)fp8 folderName:(id)fp12 parentFolder:(const struct BookmarkNode *)fp16;
- (void)setSelectedFolder:(const struct BookmarkNode *)fp8;
- (void)setEditedNode:(const struct BookmarkNode *)fp8;
- (void)tableView:(id)fp8 didSelectRowAtIndexPath:(id)fp12;
- (id)tableView:(id)fp8 willSelectRowAtIndexPath:(id)fp12;
- (id)tableView:(id)fp8 cellForRowAtIndexPath:(id)fp12;
- (int)tableView:(id)fp8 numberOfRowsInSection:(int)fp12;
- (int)numberOfSectionsInTableView:(id)fp8;
- (BOOL)shouldAutorotateToInterfaceOrientation:(int)fp8;
- (void)viewWillAppear:(BOOL)fp8;
- (void)viewDidUnload;
- (void)viewDidLoad;
- (void)updateFoldersFromNode:(const struct BookmarkNode *)fp8;
- (void)reloadFolders;
- (void)clearFolders;
-     // Error parsing type: @16@0:4^{BookmarkModel=^^?^^?{NotificationRegistrar={vector<content::NotificationRegistrar::Record, std::allocator<content::NotificationRegistrar::Record> >={_Vector_impl=^{Record}^{Record}^{Record}}}}^{Profile}BB{BookmarkNode=^^?{basic_string<unsigned short, base::string16_char_traits, std::allocator<unsigned short> >={_Alloc_hider=^S}}^{BookmarkNode}{ScopedVector<BookmarkNode>={vector<BookmarkNode *, std::allocator<BookmarkNode *> >={_Vector_impl=^^{BookmarkNode}^^{BookmarkNode}^^{BookmarkNode}}}}q{GURL={basic_string<char, std::char_traits<char>, std::allocator<char> >={_Alloc_hider=*}}B{Parsed={Component=ii}{Component=ii}{Component=ii}{Component=ii}{Component=ii}{Component=ii}{Component=ii}{Component=ii}^{Parsed}}^{GURL}}i{Time=q}{Time=q}{scoped_ptr<gfx::Image>=^{Image}}iBi}^{BookmarkPermanentNode}^{BookmarkPermanentNode}^{BookmarkPermanentNode}q{ObserverList<BookmarkModelObserver, false>={WeakReferenceOwner={scoped_refptr<base::internal::WeakReference::Flag>=^{Flag}}}{vector<BookmarkModelObserver *, std::allocator<BookmarkModelObserver *> >={_Vector_impl=^^{BookmarkModelObserver}^^{BookmarkModelObserver}^^{BookmarkModelObserver}}}ii}{multiset<BookmarkNode *, BookmarkModel::NodeURLComparator, std::allocator<BookmarkNode *> >={_Rb_tree<BookmarkNode *, BookmarkNode *, std::_Identity<BookmarkNode *>, BookmarkModel::NodeURLComparator, std::allocator<BookmarkNode *> >={_Rb_tree_impl<BookmarkModel::NodeURLComparator, false>={NodeURLComparator=}{_Rb_tree_node_base=i^{_Rb_tree_node_base}^{_Rb_tree_node_base}^{_Rb_tree_node_base}}I}}}{Lock={LockImpl={_opaque_pthread_mutex_t=l[40c]}}}{CancelableRequestConsumerTSimple<BookmarkNode *>=^^?{map<CancelableRequestConsumerTSimple<BookmarkNode *>::PendingRequest, BookmarkNode *, std::less<CancelableRequestConsumerTSimple<BookmarkNode *>::PendingRequest>, std::allocator<std::pair<const CancelableRequestConsumerTSimple<BookmarkNode *>::PendingRequest, BookmarkNode *> > >={_Rb_tree<CancelableRequestConsumerTSimple<BookmarkNode *>::PendingRequest, std::pair<const CancelableRequestConsumerTSimple<BookmarkNode *>::PendingRequest, BookmarkNode *>, std::_Select1st<std::pair<const CancelableRequestConsumerTSimple<BookmarkNode *>::PendingRequest, BookmarkNode *> >, std::less<CancelableRequestConsumerTSimple<BookmarkNode *>::PendingRequest>, std::allocator<std::pair<const CancelableRequestConsumerTSimple<BookmarkNode *>::PendingRequest, BookmarkNode *> > >={_Rb_tree_impl<std::less<CancelableRequestConsumerTSimple<BookmarkNode *>::PendingRequest>, false>={less<CancelableRequestConsumerTSimple<BookmarkNode *>::PendingRequest>=}{_Rb_tree_node_base=i^{_Rb_tree_node_base}^{_Rb_tree_node_base}^{_Rb_tree_node_base}}I}}}{PendingRequest=^{CancelableRequestProvider}i}}{scoped_refptr<BookmarkStorage>=^{BookmarkStorage}}{scoped_ptr<BookmarkIndex>=^{BookmarkIndex}}{WaitableEvent={scoped_refptr<base::WaitableEvent::WaitableEventKernel>=^{WaitableEventKernel}}}i{scoped_ptr<BookmarkExpandedStateTracker>=^{BookmarkExpandedStateTracker}}}8c12, name: initWithBookmarks:allowNewfolders:

@end

